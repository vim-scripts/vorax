
# line 1 "vorax/ruby/lib/vorax/parser/grammars/record_typ.rl"

# line 36 "vorax/ruby/lib/vorax/parser/grammars/record_typ.rl"


module Vorax

	module Parser

		def Parser.describe_record(data)
		  @type = nil
		  @attributes = []
		  if data
			  eof = data.length
        
# line 18 "vorax/ruby/lib/vorax/parser/grammars/record_typ.rb"
class << self
	attr_accessor :_record_typ_actions
	private :_record_typ_actions, :_record_typ_actions=
end
self._record_typ_actions = [
	0, 1, 1, 1, 3, 1, 4, 1, 
	5, 1, 6, 1, 7, 1, 12, 1, 
	15, 1, 16, 1, 17, 1, 18, 1, 
	19, 1, 20, 1, 21, 2, 0, 14, 
	2, 2, 13, 2, 4, 1, 2, 7, 
	2, 2, 7, 8, 2, 7, 9, 2, 
	7, 11, 3, 7, 1, 2, 3, 7, 
	2, 10, 4, 7, 4, 1, 2, 5, 
	7, 4, 1, 2, 10
]

class << self
	attr_accessor :_record_typ_key_offsets
	private :_record_typ_key_offsets, :_record_typ_key_offsets=
end
self._record_typ_key_offsets = [
	0, 9, 10, 11, 12, 13, 15, 17, 
	19, 21, 23, 25, 27, 32, 46, 47, 
	54, 60, 61, 62, 63, 64, 66, 74, 
	75, 82, 90, 91, 106, 122, 138, 139, 
	140, 141, 142, 144, 146, 151, 158, 159, 
	160, 161, 162, 164, 166, 168, 170, 172, 
	174, 180, 193, 194, 221, 248, 249, 253, 
	255, 257, 259, 261, 263, 265, 273, 274, 
	282, 283, 284, 285, 286, 287, 289, 299, 
	314, 315, 316, 317, 318, 320, 321, 322, 
	323, 324, 326, 327, 328, 341, 342, 343, 
	344, 345, 347, 348, 349, 351, 360, 369, 
	371, 373, 374, 384, 395, 406, 419, 432, 
	445, 458, 471, 484, 497, 510, 523, 536, 
	549, 562, 575, 588, 601, 614, 627, 640, 
	653, 666, 681, 694, 707, 720, 733, 746, 
	759, 772, 785, 798, 811, 824, 837, 850, 
	863, 880, 881, 882, 883, 896, 897, 898
]

class << self
	attr_accessor :_record_typ_trans_keys
	private :_record_typ_trans_keys, :_record_typ_trans_keys=
end
self._record_typ_trans_keys = [
	32, 45, 47, 68, 73, 100, 105, 9, 
	13, 45, 10, 42, 42, 42, 47, 69, 
	101, 70, 102, 65, 97, 85, 117, 76, 
	108, 84, 116, 32, 45, 47, 9, 13, 
	32, 34, 40, 45, 47, 95, 9, 13, 
	35, 36, 65, 90, 97, 122, 34, 32, 
	40, 45, 46, 47, 9, 13, 32, 40, 
	45, 47, 9, 13, 45, 10, 42, 42, 
	42, 47, 34, 95, 35, 36, 65, 90, 
	97, 122, 34, 32, 40, 45, 46, 47, 
	9, 13, 34, 95, 35, 36, 65, 90, 
	97, 122, 34, 32, 40, 45, 47, 95, 
	9, 13, 35, 36, 48, 57, 65, 90, 
	97, 122, 32, 40, 45, 46, 47, 95, 
	9, 13, 35, 36, 48, 57, 65, 90, 
	97, 122, 32, 40, 45, 46, 47, 95, 
	9, 13, 35, 36, 48, 57, 65, 90, 
	97, 122, 45, 10, 42, 42, 42, 47, 
	83, 115, 32, 45, 47, 9, 13, 32, 
	45, 47, 82, 114, 9, 13, 45, 10, 
	42, 42, 42, 47, 69, 101, 67, 99, 
	79, 111, 82, 114, 68, 100, 32, 40, 
	45, 47, 9, 13, 32, 34, 45, 47, 
	95, 9, 13, 35, 36, 65, 90, 97, 
	122, 34, 32, 34, 45, 47, 66, 67, 
	69, 70, 80, 83, 84, 95, 98, 99, 
	101, 102, 112, 115, 116, 9, 13, 35, 
	36, 65, 90, 97, 122, 32, 34, 45, 
	47, 66, 67, 69, 70, 80, 83, 84, 
	95, 98, 99, 101, 102, 112, 115, 116, 
	9, 13, 35, 36, 65, 90, 97, 122, 
	34, 82, 84, 114, 116, 79, 111, 87, 
	119, 84, 116, 89, 121, 80, 112, 69, 
	101, 34, 95, 35, 36, 65, 90, 97, 
	122, 34, 34, 95, 35, 36, 65, 90, 
	97, 122, 34, 45, 10, 42, 42, 42, 
	47, 46, 95, 35, 36, 48, 57, 65, 
	90, 97, 122, 32, 34, 45, 47, 95, 
	9, 13, 35, 36, 48, 57, 65, 90, 
	97, 122, 45, 10, 42, 42, 42, 47, 
	45, 10, 42, 42, 42, 47, 34, 39, 
	32, 34, 45, 47, 95, 9, 13, 35, 
	36, 65, 90, 97, 122, 45, 10, 42, 
	42, 42, 47, 10, 42, 42, 47, 32, 
	34, 39, 44, 45, 47, 58, 9, 13, 
	32, 45, 47, 68, 73, 100, 105, 9, 
	13, 37, 46, 37, 46, 37, 37, 95, 
	35, 36, 48, 57, 65, 90, 97, 122, 
	37, 46, 95, 35, 36, 48, 57, 65, 
	90, 97, 122, 37, 46, 95, 35, 36, 
	48, 57, 65, 90, 97, 122, 37, 46, 
	69, 95, 101, 35, 36, 48, 57, 65, 
	90, 97, 122, 37, 46, 71, 95, 103, 
	35, 36, 48, 57, 65, 90, 97, 122, 
	37, 46, 73, 95, 105, 35, 36, 48, 
	57, 65, 90, 97, 122, 37, 46, 78, 
	95, 110, 35, 36, 48, 57, 65, 90, 
	97, 122, 37, 46, 85, 95, 117, 35, 
	36, 48, 57, 65, 90, 97, 122, 37, 
	46, 82, 95, 114, 35, 36, 48, 57, 
	65, 90, 97, 122, 37, 46, 83, 95, 
	115, 35, 36, 48, 57, 65, 90, 97, 
	122, 37, 46, 79, 95, 111, 35, 36, 
	48, 57, 65, 90, 97, 122, 37, 46, 
	82, 95, 114, 35, 36, 48, 57, 65, 
	90, 97, 122, 37, 46, 88, 95, 120, 
	35, 36, 48, 57, 65, 90, 97, 122, 
	37, 46, 67, 95, 99, 35, 36, 48, 
	57, 65, 90, 97, 122, 37, 46, 69, 
	95, 101, 35, 36, 48, 57, 65, 90, 
	97, 122, 37, 46, 80, 95, 112, 35, 
	36, 48, 57, 65, 90, 97, 122, 37, 
	46, 84, 95, 116, 35, 36, 48, 57, 
	65, 90, 97, 122, 37, 46, 73, 95, 
	105, 35, 36, 48, 57, 65, 90, 97, 
	122, 37, 46, 79, 95, 111, 35, 36, 
	48, 57, 65, 90, 97, 122, 37, 46, 
	85, 95, 117, 35, 36, 48, 57, 65, 
	90, 97, 122, 37, 46, 78, 95, 110, 
	35, 36, 48, 57, 65, 90, 97, 122, 
	37, 46, 67, 95, 99, 35, 36, 48, 
	57, 65, 90, 97, 122, 37, 46, 82, 
	95, 114, 35, 36, 48, 57, 65, 90, 
	97, 122, 37, 46, 65, 79, 95, 97, 
	111, 35, 36, 48, 57, 66, 90, 98, 
	122, 37, 46, 71, 95, 103, 35, 36, 
	48, 57, 65, 90, 97, 122, 37, 46, 
	77, 95, 109, 35, 36, 48, 57, 65, 
	90, 97, 122, 37, 46, 65, 95, 97, 
	35, 36, 48, 57, 66, 90, 98, 122, 
	37, 46, 67, 95, 99, 35, 36, 48, 
	57, 65, 90, 97, 122, 37, 46, 69, 
	95, 101, 35, 36, 48, 57, 65, 90, 
	97, 122, 37, 46, 68, 95, 100, 35, 
	36, 48, 57, 65, 90, 97, 122, 37, 
	46, 85, 95, 117, 35, 36, 48, 57, 
	65, 90, 97, 122, 37, 46, 82, 95, 
	114, 35, 36, 48, 57, 65, 90, 97, 
	122, 37, 46, 69, 95, 101, 35, 36, 
	48, 57, 65, 90, 97, 122, 37, 46, 
	85, 95, 117, 35, 36, 48, 57, 65, 
	90, 97, 122, 37, 46, 66, 95, 98, 
	35, 36, 48, 57, 65, 90, 97, 122, 
	37, 46, 84, 95, 116, 35, 36, 48, 
	57, 65, 90, 97, 122, 37, 46, 89, 
	95, 121, 35, 36, 48, 57, 65, 90, 
	97, 122, 37, 46, 80, 95, 112, 35, 
	36, 48, 57, 65, 90, 97, 122, 32, 
	34, 37, 45, 46, 47, 95, 9, 13, 
	35, 36, 48, 57, 65, 90, 97, 122, 
	34, 39, 39, 32, 34, 45, 47, 95, 
	9, 13, 35, 36, 65, 90, 97, 122, 
	45, 42, 61, 0
]

class << self
	attr_accessor :_record_typ_single_lengths
	private :_record_typ_single_lengths, :_record_typ_single_lengths=
end
self._record_typ_single_lengths = [
	7, 1, 1, 1, 1, 2, 2, 2, 
	2, 2, 2, 2, 3, 6, 1, 5, 
	4, 1, 1, 1, 1, 2, 2, 1, 
	5, 2, 1, 5, 6, 6, 1, 1, 
	1, 1, 2, 2, 3, 5, 1, 1, 
	1, 1, 2, 2, 2, 2, 2, 2, 
	4, 5, 1, 19, 19, 1, 4, 2, 
	2, 2, 2, 2, 2, 2, 1, 2, 
	1, 1, 1, 1, 1, 2, 2, 5, 
	1, 1, 1, 1, 2, 1, 1, 1, 
	1, 2, 1, 1, 5, 1, 1, 1, 
	1, 2, 1, 1, 2, 7, 7, 2, 
	2, 1, 2, 3, 3, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	5, 7, 5, 5, 5, 5, 5, 5, 
	5, 5, 5, 5, 5, 5, 5, 5, 
	7, 1, 1, 1, 5, 1, 1, 1
]

class << self
	attr_accessor :_record_typ_range_lengths
	private :_record_typ_range_lengths, :_record_typ_range_lengths=
end
self._record_typ_range_lengths = [
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 4, 0, 1, 
	1, 0, 0, 0, 0, 0, 3, 0, 
	1, 3, 0, 5, 5, 5, 0, 0, 
	0, 0, 0, 0, 1, 1, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	1, 4, 0, 4, 4, 0, 0, 0, 
	0, 0, 0, 0, 0, 3, 0, 3, 
	0, 0, 0, 0, 0, 0, 4, 5, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 4, 0, 0, 0, 
	0, 0, 0, 0, 0, 1, 1, 0, 
	0, 0, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	4, 4, 4, 4, 4, 4, 4, 4, 
	5, 0, 0, 0, 4, 0, 0, 0
]

class << self
	attr_accessor :_record_typ_index_offsets
	private :_record_typ_index_offsets, :_record_typ_index_offsets=
end
self._record_typ_index_offsets = [
	0, 9, 11, 13, 15, 17, 20, 23, 
	26, 29, 32, 35, 38, 43, 54, 56, 
	63, 69, 71, 73, 75, 77, 80, 86, 
	88, 95, 101, 103, 114, 126, 138, 140, 
	142, 144, 146, 149, 152, 157, 164, 166, 
	168, 170, 172, 175, 178, 181, 184, 187, 
	190, 196, 206, 208, 232, 256, 258, 263, 
	266, 269, 272, 275, 278, 281, 287, 289, 
	295, 297, 299, 301, 303, 305, 308, 315, 
	326, 328, 330, 332, 334, 337, 339, 341, 
	343, 345, 348, 350, 352, 362, 364, 366, 
	368, 370, 373, 375, 377, 380, 389, 398, 
	401, 404, 406, 413, 421, 429, 439, 449, 
	459, 469, 479, 489, 499, 509, 519, 529, 
	539, 549, 559, 569, 579, 589, 599, 609, 
	619, 629, 641, 651, 661, 671, 681, 691, 
	701, 711, 721, 731, 741, 751, 761, 771, 
	781, 794, 796, 798, 800, 810, 812, 814
]

class << self
	attr_accessor :_record_typ_trans_targs
	private :_record_typ_trans_targs, :_record_typ_trans_targs=
end
self._record_typ_trans_targs = [
	0, 1, 3, 6, 35, 6, 35, 0, 
	93, 2, 93, 0, 2, 4, 93, 5, 
	4, 5, 0, 4, 7, 7, 93, 8, 
	8, 93, 9, 9, 93, 10, 10, 93, 
	11, 11, 93, 12, 12, 93, 13, 30, 
	32, 13, 93, 13, 14, 93, 30, 32, 
	29, 13, 29, 29, 29, 93, 15, 14, 
	16, 93, 17, 22, 19, 16, 93, 16, 
	93, 17, 19, 16, 93, 18, 93, 16, 
	18, 20, 93, 21, 20, 21, 16, 20, 
	23, 28, 28, 28, 28, 93, 24, 23, 
	16, 93, 17, 25, 19, 16, 93, 26, 
	27, 27, 27, 27, 93, 16, 26, 16, 
	93, 17, 19, 27, 16, 27, 27, 27, 
	27, 93, 16, 93, 17, 25, 19, 28, 
	16, 28, 28, 28, 28, 93, 16, 93, 
	17, 22, 19, 29, 16, 29, 29, 29, 
	29, 93, 31, 93, 13, 31, 33, 93, 
	34, 33, 34, 13, 33, 36, 36, 93, 
	37, 38, 40, 37, 93, 37, 38, 40, 
	43, 43, 37, 93, 39, 93, 37, 39, 
	41, 93, 42, 41, 42, 37, 41, 44, 
	44, 93, 45, 45, 93, 46, 46, 93, 
	47, 47, 93, 48, 48, 93, 48, 49, 
	77, 79, 48, 93, 49, 50, 72, 74, 
	71, 49, 71, 71, 71, 93, 51, 50, 
	52, 53, 65, 67, 101, 105, 110, 117, 
	120, 131, 134, 100, 101, 105, 110, 117, 
	120, 131, 134, 52, 100, 100, 100, 93, 
	52, 53, 65, 67, 101, 105, 110, 117, 
	120, 131, 134, 100, 101, 105, 110, 117, 
	120, 131, 134, 52, 100, 100, 100, 93, 
	95, 53, 55, 58, 55, 58, 93, 56, 
	56, 93, 57, 57, 93, 58, 58, 93, 
	59, 59, 93, 60, 60, 93, 93, 93, 
	93, 62, 99, 99, 99, 99, 93, 96, 
	62, 64, 98, 98, 98, 98, 93, 97, 
	64, 66, 93, 52, 66, 68, 93, 69, 
	68, 69, 52, 68, 61, 100, 100, 100, 
	100, 100, 93, 52, 53, 65, 67, 136, 
	52, 136, 71, 136, 136, 93, 73, 93, 
	49, 73, 75, 93, 76, 75, 76, 49, 
	75, 78, 93, 48, 78, 80, 93, 81, 
	80, 81, 48, 80, 93, 82, 139, 83, 
	84, 50, 85, 87, 71, 84, 71, 71, 
	71, 93, 86, 93, 84, 86, 88, 93, 
	89, 88, 89, 84, 88, 94, 90, 92, 
	91, 92, 94, 91, 94, 137, 138, 140, 
	141, 142, 143, 94, 93, 0, 1, 3, 
	6, 35, 6, 35, 0, 93, 54, 61, 
	93, 54, 63, 93, 54, 93, 54, 98, 
	98, 98, 98, 98, 93, 54, 63, 99, 
	99, 99, 99, 99, 93, 54, 61, 100, 
	100, 100, 100, 100, 93, 54, 61, 102, 
	100, 102, 100, 100, 100, 100, 93, 54, 
	61, 103, 100, 103, 100, 100, 100, 100, 
	93, 54, 61, 104, 100, 104, 100, 100, 
	100, 100, 93, 54, 61, 70, 100, 70, 
	100, 100, 100, 100, 93, 54, 61, 106, 
	100, 106, 100, 100, 100, 100, 93, 54, 
	61, 107, 100, 107, 100, 100, 100, 100, 
	93, 54, 61, 108, 100, 108, 100, 100, 
	100, 100, 93, 54, 61, 109, 100, 109, 
	100, 100, 100, 100, 93, 54, 61, 70, 
	100, 70, 100, 100, 100, 100, 93, 54, 
	61, 111, 100, 111, 100, 100, 100, 100, 
	93, 54, 61, 112, 100, 112, 100, 100, 
	100, 100, 93, 54, 61, 113, 100, 113, 
	100, 100, 100, 100, 93, 54, 61, 114, 
	100, 114, 100, 100, 100, 100, 93, 54, 
	61, 115, 100, 115, 100, 100, 100, 100, 
	93, 54, 61, 116, 100, 116, 100, 100, 
	100, 100, 93, 54, 61, 104, 100, 104, 
	100, 100, 100, 100, 93, 54, 61, 118, 
	100, 118, 100, 100, 100, 100, 93, 54, 
	61, 119, 100, 119, 100, 100, 100, 100, 
	93, 54, 61, 114, 100, 114, 100, 100, 
	100, 100, 93, 54, 61, 121, 100, 121, 
	100, 100, 100, 100, 93, 54, 61, 122, 
	125, 100, 122, 125, 100, 100, 100, 100, 
	93, 54, 61, 123, 100, 123, 100, 100, 
	100, 100, 93, 54, 61, 124, 100, 124, 
	100, 100, 100, 100, 93, 54, 61, 70, 
	100, 70, 100, 100, 100, 100, 93, 54, 
	61, 126, 100, 126, 100, 100, 100, 100, 
	93, 54, 61, 127, 100, 127, 100, 100, 
	100, 100, 93, 54, 61, 128, 100, 128, 
	100, 100, 100, 100, 93, 54, 61, 129, 
	100, 129, 100, 100, 100, 100, 93, 54, 
	61, 130, 100, 130, 100, 100, 100, 100, 
	93, 54, 61, 70, 100, 70, 100, 100, 
	100, 100, 93, 54, 61, 132, 100, 132, 
	100, 100, 100, 100, 93, 54, 61, 133, 
	100, 133, 100, 100, 100, 100, 93, 54, 
	61, 134, 100, 134, 100, 100, 100, 100, 
	93, 54, 61, 135, 100, 135, 100, 100, 
	100, 100, 93, 54, 61, 130, 100, 130, 
	100, 100, 100, 100, 93, 52, 53, 54, 
	65, 61, 67, 136, 52, 136, 136, 136, 
	136, 93, 93, 82, 139, 83, 83, 93, 
	84, 50, 85, 87, 71, 84, 71, 71, 
	71, 93, 90, 93, 91, 93, 13, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 93, 
	93, 93, 93, 93, 93, 93, 93, 0
]

class << self
	attr_accessor :_record_typ_trans_actions
	private :_record_typ_trans_actions, :_record_typ_trans_actions=
end
self._record_typ_trans_actions = [
	0, 0, 0, 0, 0, 0, 0, 0, 
	27, 0, 27, 0, 0, 0, 27, 0, 
	0, 0, 0, 0, 0, 0, 27, 0, 
	0, 27, 0, 0, 27, 0, 0, 27, 
	0, 0, 27, 0, 0, 27, 0, 0, 
	0, 0, 27, 0, 0, 29, 0, 0, 
	0, 0, 0, 0, 0, 27, 0, 0, 
	0, 29, 0, 0, 0, 0, 27, 0, 
	29, 0, 0, 0, 27, 0, 27, 0, 
	0, 0, 27, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 27, 0, 0, 
	0, 29, 0, 0, 0, 0, 27, 0, 
	0, 0, 0, 0, 27, 0, 0, 0, 
	29, 0, 0, 0, 0, 0, 0, 0, 
	0, 27, 0, 29, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 27, 0, 29, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 27, 0, 27, 0, 0, 0, 27, 
	0, 0, 0, 0, 0, 0, 0, 27, 
	0, 0, 0, 0, 27, 0, 0, 0, 
	0, 0, 0, 27, 0, 27, 0, 0, 
	0, 27, 0, 0, 0, 0, 0, 0, 
	0, 27, 0, 0, 27, 0, 0, 27, 
	0, 0, 27, 0, 0, 27, 0, 0, 
	0, 0, 0, 27, 0, 3, 0, 0, 
	3, 0, 3, 3, 3, 27, 0, 0, 
	5, 35, 5, 5, 58, 58, 58, 58, 
	58, 58, 58, 58, 58, 58, 58, 58, 
	58, 58, 58, 5, 58, 58, 58, 27, 
	0, 1, 0, 0, 50, 50, 50, 50, 
	50, 50, 50, 50, 50, 50, 50, 50, 
	50, 50, 50, 0, 50, 50, 50, 27, 
	38, 0, 0, 0, 0, 0, 23, 0, 
	0, 23, 0, 0, 23, 0, 0, 23, 
	0, 0, 23, 0, 0, 23, 32, 32, 
	23, 0, 38, 38, 38, 38, 23, 38, 
	0, 0, 38, 38, 38, 38, 23, 38, 
	0, 0, 27, 0, 0, 0, 27, 0, 
	0, 0, 0, 0, 0, 38, 38, 38, 
	38, 38, 23, 5, 35, 5, 5, 63, 
	5, 63, 0, 63, 63, 27, 0, 27, 
	0, 0, 0, 27, 0, 0, 0, 0, 
	0, 0, 27, 0, 0, 0, 27, 0, 
	0, 0, 0, 0, 13, 0, 41, 0, 
	0, 3, 0, 0, 3, 0, 3, 3, 
	3, 25, 0, 25, 0, 0, 0, 25, 
	0, 0, 0, 0, 0, 44, 0, 0, 
	0, 0, 44, 0, 47, 11, 47, 47, 
	11, 11, 47, 47, 15, 0, 0, 0, 
	0, 0, 0, 0, 0, 27, 0, 0, 
	19, 0, 0, 19, 0, 19, 0, 38, 
	38, 38, 38, 38, 19, 0, 0, 38, 
	38, 38, 38, 38, 19, 0, 0, 38, 
	38, 38, 38, 38, 19, 0, 0, 38, 
	38, 38, 38, 38, 38, 38, 19, 0, 
	0, 38, 38, 38, 38, 38, 38, 38, 
	19, 0, 0, 38, 38, 38, 38, 38, 
	38, 38, 19, 0, 0, 0, 38, 0, 
	38, 38, 38, 38, 19, 0, 0, 38, 
	38, 38, 38, 38, 38, 38, 19, 0, 
	0, 38, 38, 38, 38, 38, 38, 38, 
	19, 0, 0, 38, 38, 38, 38, 38, 
	38, 38, 19, 0, 0, 38, 38, 38, 
	38, 38, 38, 38, 19, 0, 0, 0, 
	38, 0, 38, 38, 38, 38, 19, 0, 
	0, 38, 38, 38, 38, 38, 38, 38, 
	19, 0, 0, 38, 38, 38, 38, 38, 
	38, 38, 19, 0, 0, 38, 38, 38, 
	38, 38, 38, 38, 19, 0, 0, 38, 
	38, 38, 38, 38, 38, 38, 19, 0, 
	0, 38, 38, 38, 38, 38, 38, 38, 
	19, 0, 0, 38, 38, 38, 38, 38, 
	38, 38, 19, 0, 0, 38, 38, 38, 
	38, 38, 38, 38, 19, 0, 0, 38, 
	38, 38, 38, 38, 38, 38, 19, 0, 
	0, 38, 38, 38, 38, 38, 38, 38, 
	19, 0, 0, 38, 38, 38, 38, 38, 
	38, 38, 19, 0, 0, 38, 38, 38, 
	38, 38, 38, 38, 19, 0, 0, 38, 
	38, 38, 38, 38, 38, 38, 38, 38, 
	19, 0, 0, 38, 38, 38, 38, 38, 
	38, 38, 19, 0, 0, 38, 38, 38, 
	38, 38, 38, 38, 19, 0, 0, 0, 
	38, 0, 38, 38, 38, 38, 19, 0, 
	0, 38, 38, 38, 38, 38, 38, 38, 
	19, 0, 0, 38, 38, 38, 38, 38, 
	38, 38, 19, 0, 0, 38, 38, 38, 
	38, 38, 38, 38, 19, 0, 0, 38, 
	38, 38, 38, 38, 38, 38, 19, 0, 
	0, 38, 38, 38, 38, 38, 38, 38, 
	19, 0, 0, 0, 38, 0, 38, 38, 
	38, 38, 19, 0, 0, 38, 38, 38, 
	38, 38, 38, 38, 19, 0, 0, 38, 
	38, 38, 38, 38, 38, 38, 19, 0, 
	0, 38, 38, 38, 38, 38, 38, 38, 
	19, 0, 0, 38, 38, 38, 38, 38, 
	38, 38, 19, 0, 0, 38, 38, 38, 
	38, 38, 38, 38, 19, 5, 35, 0, 
	5, 0, 5, 63, 5, 63, 54, 63, 
	63, 19, 13, 0, 41, 0, 0, 17, 
	0, 3, 0, 0, 3, 0, 3, 3, 
	3, 21, 0, 21, 0, 21, 0, 21, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 27, 27, 27, 27, 23, 23, 
	23, 23, 23, 23, 23, 23, 23, 23, 
	23, 27, 27, 27, 27, 27, 23, 27, 
	27, 27, 27, 27, 27, 27, 27, 27, 
	27, 27, 25, 27, 25, 25, 25, 25, 
	25, 25, 25, 25, 25, 27, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	19, 19, 19, 19, 19, 19, 19, 19, 
	21, 21, 17, 21, 21, 21, 21, 0
]

class << self
	attr_accessor :_record_typ_to_state_actions
	private :_record_typ_to_state_actions, :_record_typ_to_state_actions=
end
self._record_typ_to_state_actions = [
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 7, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0
]

class << self
	attr_accessor :_record_typ_from_state_actions
	private :_record_typ_from_state_actions, :_record_typ_from_state_actions=
end
self._record_typ_from_state_actions = [
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 9, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0
]

class << self
	attr_accessor :_record_typ_eof_trans
	private :_record_typ_eof_trans, :_record_typ_eof_trans=
end
self._record_typ_eof_trans = [
	910, 910, 910, 910, 910, 910, 910, 910, 
	910, 910, 910, 910, 910, 910, 910, 910, 
	910, 910, 910, 910, 910, 910, 910, 910, 
	910, 910, 910, 910, 910, 910, 910, 910, 
	910, 910, 910, 910, 910, 910, 910, 910, 
	910, 910, 910, 910, 910, 910, 910, 910, 
	910, 910, 910, 910, 910, 910, 887, 887, 
	887, 887, 887, 887, 887, 887, 887, 887, 
	887, 910, 910, 910, 910, 910, 887, 910, 
	910, 910, 910, 910, 910, 910, 910, 910, 
	910, 910, 909, 910, 909, 909, 909, 909, 
	909, 909, 909, 909, 909, 0, 910, 952, 
	952, 952, 952, 952, 952, 952, 952, 952, 
	952, 952, 952, 952, 952, 952, 952, 952, 
	952, 952, 952, 952, 952, 952, 952, 952, 
	952, 952, 952, 952, 952, 952, 952, 952, 
	952, 952, 952, 952, 952, 952, 952, 952, 
	952, 959, 959, 955, 959, 959, 959, 959
]

class << self
	attr_accessor :record_typ_start
end
self.record_typ_start = 93;
class << self
	attr_accessor :record_typ_first_final
end
self.record_typ_first_final = 93;
class << self
	attr_accessor :record_typ_error
end
self.record_typ_error = -1;

class << self
	attr_accessor :record_typ_en_main
end
self.record_typ_en_main = 93;


# line 48 "vorax/ruby/lib/vorax/parser/grammars/record_typ.rl"
        
# line 605 "vorax/ruby/lib/vorax/parser/grammars/record_typ.rb"
begin
	p ||= 0
	pe ||= data.length
	cs = record_typ_start
	ts = nil
	te = nil
	act = 0
end

# line 49 "vorax/ruby/lib/vorax/parser/grammars/record_typ.rl"
        
# line 617 "vorax/ruby/lib/vorax/parser/grammars/record_typ.rb"
begin
	_klen, _trans, _keys, _acts, _nacts = nil
	_goto_level = 0
	_resume = 10
	_eof_trans = 15
	_again = 20
	_test_eof = 30
	_out = 40
	while true
	_trigger_goto = false
	if _goto_level <= 0
	if p == pe
		_goto_level = _test_eof
		next
	end
	end
	if _goto_level <= _resume
	_acts = _record_typ_from_state_actions[cs]
	_nacts = _record_typ_actions[_acts]
	_acts += 1
	while _nacts > 0
		_nacts -= 1
		_acts += 1
		case _record_typ_actions[_acts - 1]
			when 6 then
# line 1 "NONE"
		begin
ts = p
		end
# line 647 "vorax/ruby/lib/vorax/parser/grammars/record_typ.rb"
		end # from state action switch
	end
	if _trigger_goto
		next
	end
	_keys = _record_typ_key_offsets[cs]
	_trans = _record_typ_index_offsets[cs]
	_klen = _record_typ_single_lengths[cs]
	_break_match = false
	
	begin
	  if _klen > 0
	     _lower = _keys
	     _upper = _keys + _klen - 1

	     loop do
	        break if _upper < _lower
	        _mid = _lower + ( (_upper - _lower) >> 1 )

	        if data[p].ord < _record_typ_trans_keys[_mid]
	           _upper = _mid - 1
	        elsif data[p].ord > _record_typ_trans_keys[_mid]
	           _lower = _mid + 1
	        else
	           _trans += (_mid - _keys)
	           _break_match = true
	           break
	        end
	     end # loop
	     break if _break_match
	     _keys += _klen
	     _trans += _klen
	  end
	  _klen = _record_typ_range_lengths[cs]
	  if _klen > 0
	     _lower = _keys
	     _upper = _keys + (_klen << 1) - 2
	     loop do
	        break if _upper < _lower
	        _mid = _lower + (((_upper-_lower) >> 1) & ~1)
	        if data[p].ord < _record_typ_trans_keys[_mid]
	          _upper = _mid - 2
	        elsif data[p].ord > _record_typ_trans_keys[_mid+1]
	          _lower = _mid + 2
	        else
	          _trans += ((_mid - _keys) >> 1)
	          _break_match = true
	          break
	        end
	     end # loop
	     break if _break_match
	     _trans += _klen
	  end
	end while false
	end
	if _goto_level <= _eof_trans
	cs = _record_typ_trans_targs[_trans]
	if _record_typ_trans_actions[_trans] != 0
		_acts = _record_typ_trans_actions[_trans]
		_nacts = _record_typ_actions[_acts]
		_acts += 1
		while _nacts > 0
			_nacts -= 1
			_acts += 1
			case _record_typ_actions[_acts - 1]
when 0 then
# line 7 "vorax/ruby/lib/vorax/parser/grammars/record_typ.rl"
		begin

  expr = Parser.walk_balanced_paren(data[(p..-1)])
  p += expr.length - 1
  te = p
		end
when 1 then
# line 23 "vorax/ruby/lib/vorax/parser/grammars/record_typ.rl"
		begin
@start_typ = p		end
when 2 then
# line 23 "vorax/ruby/lib/vorax/parser/grammars/record_typ.rl"
		begin
@type = data[@start_typ..p]		end
when 3 then
# line 24 "vorax/ruby/lib/vorax/parser/grammars/record_typ.rl"
		begin
 @start_attr = p 		end
when 4 then
# line 24 "vorax/ruby/lib/vorax/parser/grammars/record_typ.rl"
		begin
 @end_attr = p 		end
when 7 then
# line 1 "NONE"
		begin
te = p+1
		end
when 8 then
# line 28 "vorax/ruby/lib/vorax/parser/grammars/record_typ.rl"
		begin
act = 1;		end
when 9 then
# line 30 "vorax/ruby/lib/vorax/parser/grammars/record_typ.rl"
		begin
act = 3;		end
when 10 then
# line 31 "vorax/ruby/lib/vorax/parser/grammars/record_typ.rl"
		begin
act = 4;		end
when 11 then
# line 33 "vorax/ruby/lib/vorax/parser/grammars/record_typ.rl"
		begin
act = 6;		end
when 12 then
# line 29 "vorax/ruby/lib/vorax/parser/grammars/record_typ.rl"
		begin
te = p+1
		end
when 13 then
# line 31 "vorax/ruby/lib/vorax/parser/grammars/record_typ.rl"
		begin
te = p+1
 begin  @attributes << { :name => data[(@start_attr..@end_attr-1)], :type => @type }  end
		end
when 14 then
# line 32 "vorax/ruby/lib/vorax/parser/grammars/record_typ.rl"
		begin
te = p+1
		end
when 15 then
# line 33 "vorax/ruby/lib/vorax/parser/grammars/record_typ.rl"
		begin
te = p+1
		end
when 16 then
# line 28 "vorax/ruby/lib/vorax/parser/grammars/record_typ.rl"
		begin
te = p
p = p - 1;		end
when 17 then
# line 31 "vorax/ruby/lib/vorax/parser/grammars/record_typ.rl"
		begin
te = p
p = p - 1; begin  @attributes << { :name => data[(@start_attr..@end_attr-1)], :type => @type }  end
		end
when 18 then
# line 33 "vorax/ruby/lib/vorax/parser/grammars/record_typ.rl"
		begin
te = p
p = p - 1;		end
when 19 then
# line 31 "vorax/ruby/lib/vorax/parser/grammars/record_typ.rl"
		begin
 begin p = ((te))-1; end
 begin  @attributes << { :name => data[(@start_attr..@end_attr-1)], :type => @type }  end
		end
when 20 then
# line 33 "vorax/ruby/lib/vorax/parser/grammars/record_typ.rl"
		begin
 begin p = ((te))-1; end
		end
when 21 then
# line 1 "NONE"
		begin
	case act
	when 4 then
	begin begin p = ((te))-1; end
 @attributes << { :name => data[(@start_attr..@end_attr-1)], :type => @type } end
	when 6 then
	begin begin p = ((te))-1; end
end
	else
	begin begin p = ((te))-1; end
end
end 
			end
# line 821 "vorax/ruby/lib/vorax/parser/grammars/record_typ.rb"
			end # action switch
		end
	end
	if _trigger_goto
		next
	end
	end
	if _goto_level <= _again
	_acts = _record_typ_to_state_actions[cs]
	_nacts = _record_typ_actions[_acts]
	_acts += 1
	while _nacts > 0
		_nacts -= 1
		_acts += 1
		case _record_typ_actions[_acts - 1]
when 5 then
# line 1 "NONE"
		begin
ts = nil;		end
# line 841 "vorax/ruby/lib/vorax/parser/grammars/record_typ.rb"
		end # to state action switch
	end
	if _trigger_goto
		next
	end
	p += 1
	if p != pe
		_goto_level = _resume
		next
	end
	end
	if _goto_level <= _test_eof
	if p == eof
	if _record_typ_eof_trans[cs] > 0
		_trans = _record_typ_eof_trans[cs] - 1;
		_goto_level = _eof_trans
		next;
	end
end
	end
	if _goto_level <= _out
		break
	end
	end
	end

# line 50 "vorax/ruby/lib/vorax/parser/grammars/record_typ.rl"
		  end
		  return @attributes
		end

	end

end
