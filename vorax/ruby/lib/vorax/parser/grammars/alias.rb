
# line 1 "lib/vorax/parser/grammars/alias.rl"

# line 84 "lib/vorax/parser/grammars/alias.rl"


module Vorax

  module Parser

    # An abstraction for an alias within a SQL statement.
    class Alias

      def initialize        
        @not_alias = ['ON', 'WHERE', 'FROM', 'CONNECT', 'START', 
                      'GROUP', 'HAVING', 'MODEL']
      end

      # Walks the provided statement searching for alias references.
      #
      # @param data the statement
      def walk(data)
        @refs = [];
        @start_columns = 0
        @columns = nil;
        data << "\n"
        eof = data.length
        
# line 30 "lib/vorax/parser/grammars/alias.rb"
class << self
	attr_accessor :_alias_actions
	private :_alias_actions, :_alias_actions=
end
self._alias_actions = [
	0, 1, 1, 1, 2, 1, 3, 1, 
	6, 1, 8, 1, 9, 1, 10, 1, 
	16, 1, 17, 1, 18, 1, 19, 1, 
	20, 1, 21, 1, 23, 1, 24, 1, 
	25, 1, 26, 1, 27, 1, 28, 1, 
	29, 2, 1, 21, 2, 1, 23, 2, 
	3, 21, 2, 3, 23, 2, 5, 2, 
	2, 6, 22, 2, 7, 0, 2, 10, 
	2, 2, 10, 4, 2, 10, 11, 2, 
	10, 12, 2, 10, 13, 2, 10, 14, 
	2, 10, 15, 3, 10, 7, 0, 3, 
	10, 7, 4
]

class << self
	attr_accessor :_alias_key_offsets
	private :_alias_key_offsets, :_alias_key_offsets=
end
self._alias_key_offsets = [
	0, 9, 10, 11, 12, 13, 15, 17, 
	19, 21, 26, 40, 41, 55, 56, 62, 
	76, 77, 78, 79, 87, 88, 89, 90, 
	92, 100, 101, 102, 103, 104, 105, 107, 
	108, 109, 110, 111, 113, 114, 115, 116, 
	117, 119, 121, 123, 125, 130, 144, 145, 
	158, 159, 160, 161, 162, 163, 165, 173, 
	174, 182, 183, 184, 185, 186, 187, 189, 
	190, 191, 192, 193, 195, 197, 199, 201, 
	203, 205, 211, 228, 229, 230, 231, 232, 
	234, 236, 238, 243, 250, 251, 252, 253, 
	254, 256, 258, 260, 262, 267, 268, 269, 
	270, 271, 273, 275, 277, 279, 283, 285, 
	287, 289, 291, 293, 295, 297, 299, 301, 
	303, 305, 307, 309, 311, 313, 315, 317, 
	319, 321, 322, 330, 332, 334, 336, 338, 
	340, 342, 344, 346, 348, 350, 351, 352, 
	353, 354, 356, 358, 360, 362, 364, 369, 
	370, 371, 372, 373, 375, 377, 379, 384, 
	397, 398, 403, 410, 411, 412, 413, 414, 
	416, 418, 424, 430, 443, 444, 449, 456, 
	457, 458, 459, 460, 462, 464, 470, 471, 
	472, 473, 474, 476, 490, 491, 492, 493, 
	494, 496, 497, 498, 499, 500, 502, 503, 
	504, 505, 506, 508, 522, 523, 524, 525, 
	526, 528, 541, 550, 558, 564, 581, 588, 
	594, 609, 625, 631, 646, 653, 653, 662, 
	668, 673, 687, 702, 718, 723, 724, 725, 
	726, 727, 728, 730, 735, 737, 742, 744
]

class << self
	attr_accessor :_alias_trans_keys
	private :_alias_trans_keys, :_alias_trans_keys=
end
self._alias_trans_keys = [
	32, 45, 47, 70, 74, 102, 106, 9, 
	13, 45, 10, 42, 42, 42, 47, 82, 
	114, 79, 111, 77, 109, 32, 45, 47, 
	9, 13, 32, 34, 40, 45, 47, 95, 
	9, 13, 35, 36, 65, 90, 97, 122, 
	34, 32, 34, 44, 45, 47, 95, 9, 
	13, 35, 36, 65, 90, 97, 122, 34, 
	32, 44, 45, 47, 9, 13, 32, 34, 
	40, 45, 47, 95, 9, 13, 35, 36, 
	65, 90, 97, 122, 34, 45, 10, 34, 
	95, 35, 36, 65, 90, 97, 122, 34, 
	42, 42, 42, 47, 34, 95, 35, 36, 
	65, 90, 97, 122, 34, 45, 10, 42, 
	42, 42, 47, 45, 10, 42, 42, 42, 
	47, 45, 10, 42, 42, 42, 47, 79, 
	111, 73, 105, 78, 110, 32, 45, 47, 
	9, 13, 32, 34, 40, 45, 47, 95, 
	9, 13, 35, 36, 65, 90, 97, 122, 
	34, 32, 34, 45, 47, 95, 9, 13, 
	35, 36, 65, 90, 97, 122, 34, 45, 
	10, 42, 42, 42, 47, 34, 95, 35, 
	36, 65, 90, 97, 122, 34, 34, 95, 
	35, 36, 65, 90, 97, 122, 34, 45, 
	10, 42, 42, 42, 47, 34, 39, 10, 
	42, 42, 47, 84, 116, 82, 114, 65, 
	97, 67, 99, 84, 116, 32, 40, 45, 
	47, 9, 13, 32, 45, 47, 68, 72, 
	77, 83, 84, 89, 100, 104, 109, 115, 
	116, 121, 9, 13, 45, 10, 42, 42, 
	42, 47, 65, 97, 89, 121, 32, 45, 
	47, 9, 13, 32, 45, 47, 70, 102, 
	9, 13, 45, 10, 42, 42, 42, 47, 
	82, 114, 79, 111, 77, 109, 32, 45, 
	47, 9, 13, 45, 10, 42, 42, 42, 
	47, 79, 111, 85, 117, 82, 114, 73, 
	79, 105, 111, 78, 110, 85, 117, 84, 
	116, 69, 101, 78, 110, 84, 116, 72, 
	104, 69, 101, 67, 99, 79, 111, 78, 
	110, 68, 100, 73, 105, 77, 109, 69, 
	101, 90, 122, 79, 111, 78, 110, 69, 
	101, 95, 65, 72, 77, 82, 97, 104, 
	109, 114, 66, 98, 66, 98, 73, 105, 
	69, 101, 71, 103, 73, 105, 79, 111, 
	78, 110, 69, 101, 65, 97, 45, 10, 
	42, 42, 42, 47, 76, 108, 69, 101, 
	67, 99, 84, 116, 32, 45, 47, 9, 
	13, 45, 10, 42, 42, 42, 47, 84, 
	116, 72, 104, 32, 45, 47, 9, 13, 
	32, 34, 45, 47, 95, 9, 13, 35, 
	36, 65, 90, 97, 122, 34, 32, 45, 
	47, 9, 13, 32, 45, 47, 65, 97, 
	9, 13, 45, 10, 42, 42, 42, 47, 
	83, 115, 32, 40, 45, 47, 9, 13, 
	32, 44, 45, 47, 9, 13, 32, 34, 
	45, 47, 95, 9, 13, 35, 36, 65, 
	90, 97, 122, 34, 32, 45, 47, 9, 
	13, 32, 45, 47, 65, 97, 9, 13, 
	45, 10, 42, 42, 42, 47, 83, 115, 
	32, 40, 45, 47, 9, 13, 45, 10, 
	42, 42, 42, 47, 32, 45, 47, 95, 
	9, 13, 35, 36, 48, 57, 65, 90, 
	97, 122, 45, 10, 42, 42, 42, 47, 
	45, 10, 42, 42, 42, 47, 45, 10, 
	42, 42, 42, 47, 32, 45, 47, 95, 
	9, 13, 35, 36, 48, 57, 65, 90, 
	97, 122, 45, 10, 42, 42, 42, 47, 
	32, 34, 39, 45, 47, 69, 83, 87, 
	101, 115, 119, 9, 13, 32, 45, 47, 
	70, 74, 102, 106, 9, 13, 32, 44, 
	45, 46, 47, 64, 9, 13, 32, 44, 
	45, 47, 9, 13, 32, 44, 45, 46, 
	47, 64, 95, 9, 13, 35, 36, 48, 
	57, 65, 90, 97, 122, 32, 44, 45, 
	47, 64, 9, 13, 32, 44, 45, 47, 
	9, 13, 32, 44, 45, 47, 95, 9, 
	13, 35, 36, 48, 57, 65, 90, 97, 
	122, 32, 44, 45, 47, 64, 95, 9, 
	13, 35, 36, 48, 57, 65, 90, 97, 
	122, 32, 44, 45, 47, 9, 13, 32, 
	44, 45, 47, 95, 9, 13, 35, 36, 
	48, 57, 65, 90, 97, 122, 32, 45, 
	46, 47, 64, 9, 13, 95, 35, 36, 
	48, 57, 65, 90, 97, 122, 32, 45, 
	47, 64, 9, 13, 32, 45, 47, 9, 
	13, 32, 45, 47, 95, 9, 13, 35, 
	36, 48, 57, 65, 90, 97, 122, 32, 
	45, 47, 64, 95, 9, 13, 35, 36, 
	48, 57, 65, 90, 97, 122, 32, 45, 
	46, 47, 64, 95, 9, 13, 35, 36, 
	48, 57, 65, 90, 97, 122, 32, 45, 
	47, 9, 13, 34, 39, 39, 45, 42, 
	88, 120, 32, 45, 47, 9, 13, 69, 
	101, 32, 45, 47, 9, 13, 73, 105, 
	32, 44, 45, 47, 9, 13, 0
]

class << self
	attr_accessor :_alias_single_lengths
	private :_alias_single_lengths, :_alias_single_lengths=
end
self._alias_single_lengths = [
	7, 1, 1, 1, 1, 2, 2, 2, 
	2, 3, 6, 1, 6, 1, 4, 6, 
	1, 1, 1, 2, 1, 1, 1, 2, 
	2, 1, 1, 1, 1, 1, 2, 1, 
	1, 1, 1, 2, 1, 1, 1, 1, 
	2, 2, 2, 2, 3, 6, 1, 5, 
	1, 1, 1, 1, 1, 2, 2, 1, 
	2, 1, 1, 1, 1, 1, 2, 1, 
	1, 1, 1, 2, 2, 2, 2, 2, 
	2, 4, 15, 1, 1, 1, 1, 2, 
	2, 2, 3, 5, 1, 1, 1, 1, 
	2, 2, 2, 2, 3, 1, 1, 1, 
	1, 2, 2, 2, 2, 4, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 2, 2, 2, 
	2, 1, 8, 2, 2, 2, 2, 2, 
	2, 2, 2, 2, 2, 1, 1, 1, 
	1, 2, 2, 2, 2, 2, 3, 1, 
	1, 1, 1, 2, 2, 2, 3, 5, 
	1, 3, 5, 1, 1, 1, 1, 2, 
	2, 4, 4, 5, 1, 3, 5, 1, 
	1, 1, 1, 2, 2, 4, 1, 1, 
	1, 1, 2, 4, 1, 1, 1, 1, 
	2, 1, 1, 1, 1, 2, 1, 1, 
	1, 1, 2, 4, 1, 1, 1, 1, 
	2, 11, 7, 6, 4, 7, 5, 4, 
	5, 6, 4, 5, 5, 0, 1, 4, 
	3, 4, 5, 6, 3, 1, 1, 1, 
	1, 1, 2, 3, 2, 3, 2, 4
]

class << self
	attr_accessor :_alias_range_lengths
	private :_alias_range_lengths, :_alias_range_lengths=
end
self._alias_range_lengths = [
	1, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 4, 0, 4, 0, 1, 4, 
	0, 0, 0, 3, 0, 0, 0, 0, 
	3, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 4, 0, 4, 
	0, 0, 0, 0, 0, 0, 3, 0, 
	3, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 1, 1, 0, 0, 0, 0, 0, 
	0, 0, 1, 1, 0, 0, 0, 0, 
	0, 0, 0, 0, 1, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 1, 0, 
	0, 0, 0, 0, 0, 0, 1, 4, 
	0, 1, 1, 0, 0, 0, 0, 0, 
	0, 1, 1, 4, 0, 1, 1, 0, 
	0, 0, 0, 0, 0, 1, 0, 0, 
	0, 0, 0, 5, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 5, 0, 0, 0, 0, 
	0, 1, 1, 1, 1, 5, 1, 1, 
	5, 5, 1, 5, 1, 0, 4, 1, 
	1, 5, 5, 5, 1, 0, 0, 0, 
	0, 0, 0, 1, 0, 1, 0, 1
]

class << self
	attr_accessor :_alias_index_offsets
	private :_alias_index_offsets, :_alias_index_offsets=
end
self._alias_index_offsets = [
	0, 9, 11, 13, 15, 17, 20, 23, 
	26, 29, 34, 45, 47, 58, 60, 66, 
	77, 79, 81, 83, 89, 91, 93, 95, 
	98, 104, 106, 108, 110, 112, 114, 117, 
	119, 121, 123, 125, 128, 130, 132, 134, 
	136, 139, 142, 145, 148, 153, 164, 166, 
	176, 178, 180, 182, 184, 186, 189, 195, 
	197, 203, 205, 207, 209, 211, 213, 216, 
	218, 220, 222, 224, 227, 230, 233, 236, 
	239, 242, 248, 265, 267, 269, 271, 273, 
	276, 279, 282, 287, 294, 296, 298, 300, 
	302, 305, 308, 311, 314, 319, 321, 323, 
	325, 327, 330, 333, 336, 339, 344, 347, 
	350, 353, 356, 359, 362, 365, 368, 371, 
	374, 377, 380, 383, 386, 389, 392, 395, 
	398, 401, 403, 412, 415, 418, 421, 424, 
	427, 430, 433, 436, 439, 442, 444, 446, 
	448, 450, 453, 456, 459, 462, 465, 470, 
	472, 474, 476, 478, 481, 484, 487, 492, 
	502, 504, 509, 516, 518, 520, 522, 524, 
	527, 530, 536, 542, 552, 554, 559, 566, 
	568, 570, 572, 574, 577, 580, 586, 588, 
	590, 592, 594, 597, 607, 609, 611, 613, 
	615, 618, 620, 622, 624, 626, 629, 631, 
	633, 635, 637, 640, 650, 652, 654, 656, 
	658, 661, 674, 683, 691, 697, 710, 717, 
	723, 734, 746, 752, 763, 770, 771, 777, 
	783, 788, 798, 809, 821, 826, 828, 830, 
	832, 834, 836, 839, 844, 847, 852, 855
]

class << self
	attr_accessor :_alias_trans_targs
	private :_alias_trans_targs, :_alias_trans_targs=
end
self._alias_trans_targs = [
	0, 1, 3, 6, 41, 6, 41, 0, 
	201, 2, 201, 0, 2, 4, 201, 5, 
	4, 5, 0, 4, 7, 7, 201, 8, 
	8, 201, 9, 9, 201, 10, 36, 38, 
	10, 201, 10, 11, 210, 36, 38, 205, 
	10, 205, 205, 205, 201, 203, 11, 12, 
	13, 15, 17, 21, 211, 12, 211, 211, 
	211, 201, 204, 13, 14, 15, 31, 33, 
	14, 201, 15, 16, 210, 26, 28, 205, 
	15, 205, 205, 205, 201, 203, 16, 18, 
	201, 12, 18, 20, 209, 209, 209, 209, 
	201, 206, 20, 22, 201, 23, 22, 23, 
	12, 22, 25, 208, 208, 208, 208, 201, 
	207, 25, 27, 201, 15, 27, 29, 201, 
	30, 29, 30, 15, 29, 32, 201, 14, 
	32, 34, 201, 35, 34, 35, 14, 34, 
	37, 201, 10, 37, 39, 201, 40, 39, 
	40, 10, 39, 42, 42, 201, 43, 43, 
	201, 44, 44, 201, 45, 58, 60, 45, 
	201, 45, 46, 220, 58, 60, 219, 45, 
	219, 219, 219, 201, 212, 46, 47, 48, 
	49, 51, 214, 47, 214, 214, 214, 201, 
	213, 48, 50, 201, 47, 50, 52, 201, 
	53, 52, 53, 47, 52, 55, 218, 218, 
	218, 218, 201, 215, 55, 57, 217, 217, 
	217, 217, 201, 216, 57, 59, 201, 45, 
	59, 61, 201, 62, 61, 62, 45, 61, 
	201, 63, 223, 64, 202, 65, 67, 66, 
	67, 202, 66, 69, 69, 201, 70, 70, 
	201, 71, 71, 201, 72, 72, 201, 73, 
	73, 201, 73, 74, 133, 135, 73, 201, 
	74, 75, 77, 80, 98, 101, 109, 114, 
	131, 80, 98, 101, 109, 114, 131, 74, 
	201, 76, 201, 74, 76, 78, 201, 79, 
	78, 79, 74, 78, 81, 81, 201, 82, 
	82, 201, 83, 84, 86, 83, 201, 83, 
	84, 86, 89, 89, 83, 201, 85, 201, 
	83, 85, 87, 201, 88, 87, 88, 83, 
	87, 90, 90, 201, 91, 91, 201, 92, 
	92, 201, 227, 93, 95, 227, 201, 94, 
	201, 227, 94, 96, 201, 97, 96, 97, 
	227, 96, 99, 99, 201, 100, 100, 201, 
	82, 82, 201, 102, 106, 102, 106, 201, 
	103, 103, 201, 104, 104, 201, 105, 105, 
	201, 82, 82, 201, 107, 107, 201, 108, 
	108, 201, 82, 82, 201, 110, 110, 201, 
	111, 111, 201, 112, 112, 201, 113, 113, 
	201, 82, 82, 201, 115, 115, 201, 116, 
	116, 201, 117, 117, 201, 118, 118, 201, 
	119, 119, 201, 120, 120, 201, 121, 121, 
	201, 122, 201, 123, 98, 125, 126, 123, 
	98, 125, 126, 201, 124, 124, 201, 100, 
	100, 201, 102, 102, 201, 127, 127, 201, 
	128, 128, 201, 129, 129, 201, 130, 130, 
	201, 82, 82, 201, 132, 132, 201, 100, 
	100, 201, 134, 201, 73, 134, 136, 201, 
	137, 136, 137, 73, 136, 139, 139, 201, 
	140, 140, 201, 141, 141, 201, 142, 142, 
	201, 229, 143, 145, 229, 201, 144, 201, 
	229, 144, 146, 201, 147, 146, 147, 229, 
	146, 149, 149, 201, 150, 150, 201, 151, 
	196, 198, 151, 201, 151, 152, 196, 198, 
	195, 151, 195, 195, 195, 201, 153, 152, 
	154, 155, 157, 154, 201, 154, 155, 157, 
	160, 160, 154, 201, 156, 201, 154, 156, 
	158, 201, 159, 158, 159, 154, 158, 161, 
	161, 201, 161, 231, 190, 192, 161, 201, 
	162, 163, 185, 187, 162, 201, 163, 164, 
	180, 182, 179, 163, 179, 179, 179, 201, 
	165, 164, 166, 167, 169, 166, 201, 166, 
	167, 169, 172, 172, 166, 201, 168, 201, 
	166, 168, 170, 201, 171, 170, 171, 166, 
	170, 173, 173, 201, 173, 231, 174, 176, 
	173, 201, 175, 201, 173, 175, 177, 201, 
	178, 177, 178, 173, 177, 166, 167, 169, 
	179, 166, 179, 179, 179, 179, 201, 181, 
	201, 163, 181, 183, 201, 184, 183, 184, 
	163, 183, 186, 201, 162, 186, 188, 201, 
	189, 188, 189, 162, 188, 191, 201, 161, 
	191, 193, 201, 194, 193, 194, 161, 193, 
	154, 155, 157, 195, 154, 195, 195, 195, 
	195, 201, 197, 201, 151, 197, 199, 201, 
	200, 199, 200, 151, 199, 202, 221, 222, 
	224, 225, 226, 228, 230, 226, 228, 230, 
	202, 201, 0, 1, 3, 6, 41, 6, 
	41, 0, 201, 12, 15, 17, 19, 21, 
	24, 12, 201, 14, 15, 31, 33, 14, 
	201, 12, 15, 17, 19, 21, 24, 205, 
	12, 205, 205, 205, 205, 201, 12, 15, 
	17, 21, 24, 12, 201, 12, 15, 17, 
	21, 12, 201, 12, 15, 17, 21, 208, 
	12, 208, 208, 208, 208, 201, 12, 15, 
	17, 21, 24, 209, 12, 209, 209, 209, 
	209, 201, 12, 15, 17, 21, 12, 201, 
	14, 15, 31, 33, 211, 14, 211, 211, 
	211, 211, 201, 47, 49, 54, 51, 56, 
	47, 201, 201, 214, 214, 214, 214, 214, 
	201, 47, 49, 51, 56, 47, 201, 47, 
	49, 51, 47, 201, 47, 49, 51, 217, 
	47, 217, 217, 217, 217, 201, 47, 49, 
	51, 56, 218, 47, 218, 218, 218, 218, 
	201, 47, 49, 54, 51, 56, 219, 47, 
	219, 219, 219, 219, 201, 47, 49, 51, 
	47, 201, 201, 63, 223, 64, 64, 201, 
	65, 201, 66, 201, 68, 68, 201, 227, 
	93, 95, 227, 201, 138, 138, 201, 229, 
	143, 145, 229, 201, 148, 148, 201, 162, 
	163, 185, 187, 162, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 201, 201, 201, 201, 
	201, 201, 201, 201, 0
]

class << self
	attr_accessor :_alias_trans_actions
	private :_alias_trans_actions, :_alias_trans_actions=
end
self._alias_trans_actions = [
	0, 0, 0, 0, 0, 0, 0, 0, 
	39, 0, 39, 0, 0, 0, 39, 0, 
	0, 0, 0, 0, 0, 0, 39, 0, 
	0, 39, 0, 0, 39, 0, 0, 0, 
	0, 39, 0, 59, 87, 0, 0, 83, 
	0, 83, 83, 83, 39, 13, 0, 0, 
	3, 0, 0, 0, 62, 0, 62, 62, 
	62, 31, 13, 0, 0, 0, 0, 0, 
	0, 31, 0, 59, 87, 0, 0, 83, 
	0, 83, 83, 83, 31, 13, 0, 0, 
	31, 0, 0, 0, 13, 13, 13, 13, 
	31, 13, 0, 0, 31, 0, 0, 0, 
	0, 0, 0, 13, 13, 13, 13, 31, 
	13, 0, 0, 31, 0, 0, 0, 31, 
	0, 0, 0, 0, 0, 0, 31, 0, 
	0, 0, 31, 0, 0, 0, 0, 0, 
	0, 39, 0, 0, 0, 39, 0, 0, 
	0, 0, 0, 0, 0, 39, 0, 0, 
	39, 0, 0, 39, 0, 0, 0, 0, 
	39, 0, 59, 87, 0, 0, 83, 0, 
	83, 83, 83, 39, 13, 0, 0, 3, 
	0, 0, 3, 0, 3, 3, 3, 35, 
	0, 0, 0, 35, 0, 0, 0, 35, 
	0, 0, 0, 0, 0, 0, 13, 13, 
	13, 13, 35, 13, 0, 0, 13, 13, 
	13, 13, 35, 13, 0, 0, 39, 0, 
	0, 0, 39, 0, 0, 0, 0, 0, 
	15, 0, 68, 0, 71, 0, 0, 0, 
	0, 71, 0, 0, 0, 37, 0, 0, 
	37, 0, 0, 37, 0, 0, 37, 0, 
	0, 37, 0, 0, 0, 0, 0, 37, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	37, 0, 37, 0, 0, 0, 37, 0, 
	0, 0, 0, 0, 0, 0, 37, 0, 
	0, 37, 0, 0, 0, 0, 37, 0, 
	0, 0, 0, 0, 0, 37, 0, 37, 
	0, 0, 0, 37, 0, 0, 0, 0, 
	0, 0, 0, 37, 0, 0, 37, 0, 
	0, 37, 77, 0, 0, 77, 37, 0, 
	39, 77, 0, 0, 39, 0, 0, 0, 
	77, 0, 0, 0, 37, 0, 0, 37, 
	0, 0, 37, 0, 0, 0, 0, 37, 
	0, 0, 37, 0, 0, 37, 0, 0, 
	37, 0, 0, 37, 0, 0, 37, 0, 
	0, 37, 0, 0, 37, 0, 0, 37, 
	0, 0, 37, 0, 0, 37, 0, 0, 
	37, 0, 0, 37, 0, 0, 37, 0, 
	0, 37, 0, 0, 37, 0, 0, 37, 
	0, 0, 37, 0, 0, 37, 0, 0, 
	37, 0, 37, 0, 0, 0, 0, 0, 
	0, 0, 0, 37, 0, 0, 37, 0, 
	0, 37, 0, 0, 37, 0, 0, 37, 
	0, 0, 37, 0, 0, 37, 0, 0, 
	37, 0, 0, 37, 0, 0, 37, 0, 
	0, 37, 0, 37, 0, 0, 0, 37, 
	0, 0, 0, 0, 0, 0, 0, 37, 
	0, 0, 37, 0, 0, 37, 0, 0, 
	37, 74, 0, 0, 74, 37, 0, 39, 
	74, 0, 0, 39, 0, 0, 0, 74, 
	0, 0, 0, 37, 0, 0, 37, 0, 
	0, 0, 0, 37, 0, 53, 0, 0, 
	53, 0, 53, 53, 53, 37, 0, 0, 
	5, 5, 5, 5, 37, 0, 0, 0, 
	0, 0, 0, 37, 0, 37, 0, 0, 
	0, 37, 0, 0, 0, 0, 0, 0, 
	0, 37, 0, 65, 0, 0, 0, 37, 
	0, 0, 0, 0, 0, 33, 0, 53, 
	0, 0, 53, 0, 53, 53, 53, 33, 
	0, 0, 5, 5, 5, 5, 33, 0, 
	0, 0, 0, 0, 0, 33, 0, 33, 
	0, 0, 0, 33, 0, 0, 0, 0, 
	0, 0, 0, 33, 0, 65, 0, 0, 
	0, 33, 0, 33, 0, 0, 0, 33, 
	0, 0, 0, 0, 0, 5, 5, 5, 
	0, 5, 0, 0, 0, 0, 33, 0, 
	33, 0, 0, 0, 33, 0, 0, 0, 
	0, 0, 0, 33, 0, 0, 0, 33, 
	0, 0, 0, 0, 0, 0, 37, 0, 
	0, 0, 37, 0, 0, 0, 0, 0, 
	5, 5, 5, 0, 5, 0, 0, 0, 
	0, 37, 0, 37, 0, 0, 0, 37, 
	0, 0, 0, 0, 0, 80, 13, 80, 
	13, 13, 80, 80, 13, 80, 80, 13, 
	80, 17, 0, 0, 0, 0, 0, 0, 
	0, 0, 39, 1, 1, 1, 0, 1, 
	0, 1, 41, 5, 5, 5, 5, 5, 
	47, 1, 1, 1, 0, 1, 0, 13, 
	1, 13, 13, 13, 13, 41, 1, 1, 
	1, 1, 0, 1, 41, 1, 1, 1, 
	1, 1, 41, 1, 1, 1, 1, 13, 
	1, 13, 13, 13, 13, 41, 1, 1, 
	1, 1, 0, 13, 1, 13, 13, 13, 
	13, 41, 0, 0, 0, 0, 0, 25, 
	5, 5, 5, 5, 13, 5, 13, 13, 
	13, 13, 47, 1, 1, 0, 1, 0, 
	1, 44, 50, 0, 0, 0, 0, 0, 
	50, 1, 1, 1, 0, 1, 44, 1, 
	1, 1, 1, 44, 1, 1, 1, 13, 
	1, 13, 13, 13, 13, 44, 1, 1, 
	1, 0, 13, 1, 13, 13, 13, 13, 
	44, 1, 1, 0, 1, 0, 13, 1, 
	13, 13, 13, 13, 44, 0, 0, 0, 
	0, 27, 15, 0, 68, 0, 0, 19, 
	0, 29, 0, 29, 0, 0, 29, 77, 
	0, 0, 77, 23, 0, 0, 29, 74, 
	0, 0, 74, 21, 0, 0, 29, 7, 
	7, 7, 7, 7, 56, 39, 39, 39, 
	39, 39, 39, 39, 39, 39, 39, 39, 
	39, 31, 31, 31, 31, 31, 31, 31, 
	31, 31, 31, 31, 31, 31, 31, 31, 
	31, 31, 31, 31, 31, 31, 31, 31, 
	31, 39, 39, 39, 39, 39, 39, 39, 
	39, 39, 39, 39, 35, 35, 35, 35, 
	35, 35, 35, 35, 35, 35, 35, 39, 
	39, 39, 39, 39, 37, 39, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 39, 39, 39, 39, 39, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 39, 39, 39, 39, 
	39, 37, 37, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 37, 33, 
	33, 33, 33, 33, 33, 33, 33, 33, 
	33, 33, 33, 33, 33, 33, 33, 33, 
	33, 33, 33, 33, 33, 33, 33, 33, 
	33, 33, 33, 37, 37, 37, 37, 37, 
	37, 37, 37, 37, 37, 37, 39, 41, 
	47, 41, 41, 41, 41, 41, 25, 47, 
	44, 50, 50, 44, 44, 44, 44, 44, 
	27, 29, 29, 19, 29, 29, 29, 23, 
	29, 21, 29, 56, 0
]

class << self
	attr_accessor :_alias_to_state_actions
	private :_alias_to_state_actions, :_alias_to_state_actions=
end
self._alias_to_state_actions = [
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 9, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0
]

class << self
	attr_accessor :_alias_from_state_actions
	private :_alias_from_state_actions, :_alias_from_state_actions=
end
self._alias_from_state_actions = [
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 11, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0, 
	0, 0, 0, 0, 0, 0, 0, 0
]

class << self
	attr_accessor :_alias_eof_trans
	private :_alias_eof_trans, :_alias_eof_trans=
end
self._alias_eof_trans = [
	1063, 1063, 1063, 1063, 1063, 1063, 1063, 1063, 
	1063, 1063, 1063, 1063, 897, 897, 897, 897, 
	897, 897, 897, 897, 897, 897, 897, 897, 
	897, 897, 897, 897, 897, 897, 897, 897, 
	897, 897, 897, 897, 1063, 1063, 1063, 1063, 
	1063, 1063, 1063, 1063, 1063, 1063, 1063, 919, 
	919, 919, 919, 919, 919, 919, 919, 919, 
	919, 919, 1063, 1063, 1063, 1063, 1063, 1062, 
	1063, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 
	1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 
	1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 
	1062, 1062, 1062, 1062, 1062, 1063, 1063, 1063, 
	1063, 1063, 1062, 1062, 1062, 1062, 1062, 1062, 
	1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 
	1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 
	1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 
	1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 
	1062, 1062, 1062, 1062, 1062, 1062, 1062, 1063, 
	1063, 1063, 1063, 1063, 1062, 1062, 1062, 1062, 
	1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 
	1062, 1062, 1051, 1051, 1051, 1051, 1051, 1051, 
	1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 
	1051, 1051, 1051, 1051, 1051, 1051, 1051, 1051, 
	1051, 1051, 1051, 1051, 1051, 1051, 1062, 1062, 
	1062, 1062, 1062, 1062, 1062, 1062, 1062, 1062, 
	1062, 0, 1063, 1070, 1072, 1070, 1070, 1070, 
	1070, 1070, 1071, 1072, 1080, 1075, 1075, 1080, 
	1080, 1080, 1080, 1080, 1081, 1091, 1091, 1084, 
	1091, 1091, 1091, 1088, 1091, 1090, 1091, 1092
]

class << self
	attr_accessor :alias_start
end
self.alias_start = 201;
class << self
	attr_accessor :alias_first_final
end
self.alias_first_final = 201;
class << self
	attr_accessor :alias_error
end
self.alias_error = -1;

class << self
	attr_accessor :alias_en_main
end
self.alias_en_main = 201;


# line 108 "lib/vorax/parser/grammars/alias.rl"
        
# line 712 "lib/vorax/parser/grammars/alias.rb"
begin
	p ||= 0
	pe ||= data.length
	cs = alias_start
	ts = nil
	te = nil
	act = 0
end

# line 109 "lib/vorax/parser/grammars/alias.rl"
        
# line 724 "lib/vorax/parser/grammars/alias.rb"
begin
	_klen, _trans, _keys, _acts, _nacts = nil
	_goto_level = 0
	_resume = 10
	_eof_trans = 15
	_again = 20
	_test_eof = 30
	_out = 40
	while true
	_trigger_goto = false
	if _goto_level <= 0
	if p == pe
		_goto_level = _test_eof
		next
	end
	end
	if _goto_level <= _resume
	_acts = _alias_from_state_actions[cs]
	_nacts = _alias_actions[_acts]
	_acts += 1
	while _nacts > 0
		_nacts -= 1
		_acts += 1
		case _alias_actions[_acts - 1]
			when 9 then
# line 1 "NONE"
		begin
ts = p
		end
# line 754 "lib/vorax/parser/grammars/alias.rb"
		end # from state action switch
	end
	if _trigger_goto
		next
	end
	_keys = _alias_key_offsets[cs]
	_trans = _alias_index_offsets[cs]
	_klen = _alias_single_lengths[cs]
	_break_match = false
	
	begin
	  if _klen > 0
	     _lower = _keys
	     _upper = _keys + _klen - 1

	     loop do
	        break if _upper < _lower
	        _mid = _lower + ( (_upper - _lower) >> 1 )

	        if data[p].ord < _alias_trans_keys[_mid]
	           _upper = _mid - 1
	        elsif data[p].ord > _alias_trans_keys[_mid]
	           _lower = _mid + 1
	        else
	           _trans += (_mid - _keys)
	           _break_match = true
	           break
	        end
	     end # loop
	     break if _break_match
	     _keys += _klen
	     _trans += _klen
	  end
	  _klen = _alias_range_lengths[cs]
	  if _klen > 0
	     _lower = _keys
	     _upper = _keys + (_klen << 1) - 2
	     loop do
	        break if _upper < _lower
	        _mid = _lower + (((_upper-_lower) >> 1) & ~1)
	        if data[p].ord < _alias_trans_keys[_mid]
	          _upper = _mid - 2
	        elsif data[p].ord > _alias_trans_keys[_mid+1]
	          _lower = _mid + 2
	        else
	          _trans += ((_mid - _keys) >> 1)
	          _break_match = true
	          break
	        end
	     end # loop
	     break if _break_match
	     _trans += _klen
	  end
	end while false
	end
	if _goto_level <= _eof_trans
	cs = _alias_trans_targs[_trans]
	if _alias_trans_actions[_trans] != 0
		_acts = _alias_trans_actions[_trans]
		_nacts = _alias_actions[_acts]
		_acts += 1
		while _nacts > 0
			_nacts -= 1
			_acts += 1
			case _alias_actions[_acts - 1]
when 0 then
# line 5 "lib/vorax/parser/grammars/alias.rl"
		begin

  @t_start = p
		end
when 1 then
# line 9 "lib/vorax/parser/grammars/alias.rl"
		begin

  @table_ref = data[(@t_start..p-1)]
		end
when 2 then
# line 13 "lib/vorax/parser/grammars/alias.rl"
		begin

  @a_start = p
  @alias_value = nil
		end
when 3 then
# line 18 "lib/vorax/parser/grammars/alias.rl"
		begin

  text = data[(@a_start..p-1)]
  @alias_value = text unless @not_alias.include?(text.upcase)
		end
when 4 then
# line 23 "lib/vorax/parser/grammars/alias.rl"
		begin

  @subquery_text = Parser.walk_balanced_paren(data[(p..-1)]).gsub(/^\(|\)$/, '')
  p += 1
  @subquery_range = (p..p+@subquery_text.length-1)
  p += @subquery_text.length
  te = p
		end
when 5 then
# line 31 "lib/vorax/parser/grammars/alias.rl"
		begin

  @alias_value = nil
  @subquery_range = nil
  @subquery_text = nil
		end
when 6 then
# line 37 "lib/vorax/parser/grammars/alias.rl"
		begin

  @refs << ExprRef.new(@subquery_text, @subquery_range, @alias_value)
  @alias_value = nil
  @subquery_range = nil
  @subquery_text = nil
		end
when 7 then
# line 44 "lib/vorax/parser/grammars/alias.rl"
		begin

  add_tableref
		end
when 10 then
# line 1 "NONE"
		begin
te = p+1
		end
when 11 then
# line 73 "lib/vorax/parser/grammars/alias.rl"
		begin
act = 1;		end
when 12 then
# line 75 "lib/vorax/parser/grammars/alias.rl"
		begin
act = 3;		end
when 13 then
# line 76 "lib/vorax/parser/grammars/alias.rl"
		begin
act = 4;		end
when 14 then
# line 77 "lib/vorax/parser/grammars/alias.rl"
		begin
act = 5;		end
when 15 then
# line 81 "lib/vorax/parser/grammars/alias.rl"
		begin
act = 9;		end
when 16 then
# line 74 "lib/vorax/parser/grammars/alias.rl"
		begin
te = p+1
		end
when 17 then
# line 81 "lib/vorax/parser/grammars/alias.rl"
		begin
te = p+1
		end
when 18 then
# line 73 "lib/vorax/parser/grammars/alias.rl"
		begin
te = p
p = p - 1;		end
when 19 then
# line 76 "lib/vorax/parser/grammars/alias.rl"
		begin
te = p
p = p - 1; begin  @start_columns = te  end
		end
when 20 then
# line 77 "lib/vorax/parser/grammars/alias.rl"
		begin
te = p
p = p - 1;		end
when 21 then
# line 78 "lib/vorax/parser/grammars/alias.rl"
		begin
te = p
p = p - 1; begin  @columns = data[(@start_columns..ts)] unless @columns  end
		end
when 22 then
# line 79 "lib/vorax/parser/grammars/alias.rl"
		begin
te = p
p = p - 1;		end
when 23 then
# line 80 "lib/vorax/parser/grammars/alias.rl"
		begin
te = p
p = p - 1;		end
when 24 then
# line 81 "lib/vorax/parser/grammars/alias.rl"
		begin
te = p
p = p - 1;		end
when 25 then
# line 78 "lib/vorax/parser/grammars/alias.rl"
		begin
 begin p = ((te))-1; end
 begin  @columns = data[(@start_columns..ts)] unless @columns  end
		end
when 26 then
# line 79 "lib/vorax/parser/grammars/alias.rl"
		begin
 begin p = ((te))-1; end
		end
when 27 then
# line 80 "lib/vorax/parser/grammars/alias.rl"
		begin
 begin p = ((te))-1; end
		end
when 28 then
# line 81 "lib/vorax/parser/grammars/alias.rl"
		begin
 begin p = ((te))-1; end
		end
when 29 then
# line 1 "NONE"
		begin
	case act
	when 4 then
	begin begin p = ((te))-1; end
 @start_columns = te end
	when 9 then
	begin begin p = ((te))-1; end
end
	else
	begin begin p = ((te))-1; end
end
end 
			end
# line 987 "lib/vorax/parser/grammars/alias.rb"
			end # action switch
		end
	end
	if _trigger_goto
		next
	end
	end
	if _goto_level <= _again
	_acts = _alias_to_state_actions[cs]
	_nacts = _alias_actions[_acts]
	_acts += 1
	while _nacts > 0
		_nacts -= 1
		_acts += 1
		case _alias_actions[_acts - 1]
when 8 then
# line 1 "NONE"
		begin
ts = nil;		end
# line 1007 "lib/vorax/parser/grammars/alias.rb"
		end # to state action switch
	end
	if _trigger_goto
		next
	end
	p += 1
	if p != pe
		_goto_level = _resume
		next
	end
	end
	if _goto_level <= _test_eof
	if p == eof
	if _alias_eof_trans[cs] > 0
		_trans = _alias_eof_trans[cs] - 1;
		_goto_level = _eof_trans
		next;
	end
end
	end
	if _goto_level <= _out
		break
	end
	end
	end

# line 110 "lib/vorax/parser/grammars/alias.rl"
        data.chop!

        # needed to finalize the last pending tableref
        add_tableref
      end

      # Get all identified tableref/exprref references. This method
      # should be called after walk.
      #
      # @return an array of references
      def refs
        @refs
      end

      # A string containing the column list, if there's any.
      #
      # @return a string with all defined columns
      def query_fields
        @columns
      end

      private 
      
      def add_tableref
        if (not @table_ref.nil?)
          @refs << TableRef.new(@table_ref, @alias_value)
        elsif (not @subquery_text.nil?)
          @refs << ExprRef.new(@subquery_text, 
                               @subquery_range, 
                               @alias_value)
        end
        @alias_value = nil
        @table_ref = nil
      end

    end

  end

end

