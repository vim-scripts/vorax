*vorax.txt*   An Oracle IDE for geeks.
              For vim version 7.3

                               By Alexandru TicÄƒ
                     alexandru.tica email-at-sign gmail.com

                                                        *vorax* *vorax-plugin*

  Contents:
     What is VoraX .......................... |vorax-whatis|
     Features ............................... |vorax-features|
     Architecture ........................... |vorax-architecture|
     Installation Guide ..................... |vorax-install|
     Connecting to a database ............... |vorax-connect|
     Executing statements ................... |vorax-exec|
     The output window  ..................... |vorax-output|
     Edit database objects .................. |vorax-edit|
     The database explorer .................. |vorax-explorer|
     Connection profiles .................... |vorax-cmanager|
     Describing objects ..................... |vorax-describe|
     Working with Explain Plans ............. |vorax-explainplan|
     PLSQL Support  ......................... |vorax-plsql|
     The Oracle HTML Documentation .......... |vorax-oradoc|

==============================================================================
WHAT IS VORAX                                                   *vorax-whatis*

VoraX is a simple yet powerful IDE for Oracle databases that relies on the 
widely known SqlPLUS which is actually used to connect to the database, to 
execute SQL statements and to get the results back. 

Nonetheless, this interaction is hidden from the user who just uses his/her Vim 
environment without knowing that, behind, a SqlPLUS process does all the work.

The big advantage of this approach is that almost all SqlPLUS commands may be 
used without a problem. 

You will be able to format columns, set pagination, autotrace queries etc. 
Basically, everything you used to type on your SqlPLUS prompt is guaranteed to 
work in VoraX, except maybe for some exotic cases (e.g. using vim in console 
mode, having the EDITOR set to a terminal editor and executing the "ed" 
sqlplus command... who needs that anyway?). 

The other advantage is that you'll get an efficient Oracle IDE with a very 
small footprint. For Oracle DBAs this is huge because they don't need heavy 
tools with a lot of features they never use. Hence, the fact that VoraX may be 
used within a regular console makes it suitable for server environments.

The main reasons which motivate us to develop this plugin are:

  - the power of Vim editor. When applied to Oracle development or 
    database administration it brings a lot of efficiency and fun.

  - the need for a cross platform tool. Vim is available on many
    platforms which means you're free to use it on any OS you like.

  - availability as a console IDE. Having a shiny IDE on a slow SSH
    connection doesn't sound so good, does it?

  - having an IDE with a small footprint. VoraX is nothing but a 
    collection of VimL and Ruby scripts provided as a Vim plugin. We 
    hope VoraX will consume as less resources as possible.

  - the dream of an improved SqlPLUS environment. I know a lot of guys
    (including me) who use SqlPLUS a lot, even for complex tasks. 
    On the other hand, its limitations are quite annoying: we want good 
    code completion, pretty print output and so on. We cannot get rid of 
    SqlPLUS because we still think it's a great tool, but we can make it 
    better. This is another goal of VoraX.

VoraX stands for Vim ORAcle eXtension.

==============================================================================
FEATURES                                                      *vorax-features*

Below are some of the features Vorax is endowed with:

  - Advanced code completion;

  - Folding PL/SQL code;

  - A database objects browser. You may browse tables, views, packages
    and so on. 

  - Connection profiles. VoraX allows to store various connection
    strings, including the corresponding passwords. All these passwords
    are protected using a master password.
  
  - Support for editing and compiling PL/SQL modules like packages,
    types, procedures and functions.

  - Convenient key mappings for: describe object under cursor, execute
    current statement, etc.
  
  - Formatted output. You may switch to a vertical columns layout or
    to a compressed format. In a compressed layout all columns width are
    resized according to the length of the contained data.

  - Built-in HTML Oracle documentation search.

==============================================================================
ARCHITECTURE                                              *vorax-architecture*

VoraX is based on SqlPLUS to interact with the database. Every statement you
execute using VoraX is actually run by a hidden SqlPLUS process. When VoraX is
initialized a SqlPLUS process is started in background. Then VoraX
communicates with this process by sending commands and grabbing the
corresponding output.

In order to be able to implement this kind of interaction, VoraX uses Ruby
language. Even we'd like to have a pure VimL implementation, this isn't yet
possible. However, we tried to limit the development of VoraX features in Ruby 
as much as possible and use VimL instead. Nevertheless, processing html output, 
writing and parsing Oracle grammars for code completion and other complex 
tasks are still written in Ruby.

==============================================================================
INSTALLATION GUIDE                                             *vorax-install* 

VoraX follows the standard procedure of installing a Vim plugin: uncompress
the vorax archive into $HOME/.vim if you are on a *NIX platform or into
$HOME/vimfiles if you are on Windows. If you want VoraX to be available for
all users then you may consider installing VoraX in your Vim HOME location. 

You may also use Pathogen, vim-addon-manager, Vundle or other similar addons 
management plugins if you want. It's completely up to you!

However, you need to take care of some dependencies VoraX relies on: 

   1. Vim 7.3 or above is required. The 501 patch is mandatory. You may check to
      see if you have this patch using:

      :echo has('patch501')

   2. Your Vim must have ruby support enabled. In order to check this you may 
      execute :version and look for +ruby. The supported Ruby is 1.9.3 or 
      higher, including Ruby 2.0. To check the Ruby version with which your
      VIM was compiled, you may run the following command:
      
      :ruby puts RUBY_VERSION
      
      CREAM configurations are not supported therefore a plain Vim should be 
      used.

   3. Ruby 1.9.3 or higher.


   4. The ruby vorax gem:

      gem install vorax --no-rdoc --no-ri
      
      This is just a convenient method to install Vorax prerequisites.

   5. A working Oracle client with SqlPLUS, which has to be available in the 
      environment $PATH variable. An instant client with SqlPLUS should be 
      just fine.

   6. Ensure you have "filetype plugin on" set in your .vimrc file.

==============================================================================
CONNECTING TO A DATABASE                                       *vorax-connect* 

The first thing you'll usually do after you start Vorax is to connect to a 
target database. There is a simple command just for this:

  :VORAXConnect <connect_string>

For example, you may use:

  :VORAXConnect scott/tiger@db

If you don't provide the password or the database you want to connect to, 
Vorax will ask for the missing information.

In Vorax4 you can also define the VORAXBeforeConnect() and VORAXAfterConnect() 
hooks. These are just functions which are usually defined in your .vimrc and 
they are called right before/after a :VORAXConnect command was invoked. In 
these functions you may embed logic relevant for various connection profiles. 
For example, if you want to display a confirmation message for every 
connection which is made using an ADMIN user, you may use the following hook:

  function! VORAXAfterConnect(user, db, role)
    if a:user ==? 'ADMIN'
      call confirm("Do you promise you'll be a nice guy?", "&Yes")
    endif
  endfunction

Here, we used the VORAXAfterConnect hook because it is invoked only if the 
connection succeeds.

However, there are cases when we need to do something just before connecting. 
For example, one might want to CD to a specific folder before connecting to 
a database. Why before and not after? Well, because if we CD before, the 
SqlPlus buddy process will be started from that directory, so you'll have 
easy access to the SQL files from that directory. Niceee, isn't it?

Pay attention to the following differences between the BEFORE and AFTER 
hooks:

* in the BEFORE hook, the "user", "db" and "role" arguments are computed 
  from the provided connection string.
* in the AFTER hook, the "user", "db" and "role" arguments are computed 
  after the connection is made and they are provided by the SqlPlus session 
  itself.
* if you are using OS authentication (e.g. / as sysdba) the "user" and the 
  "db" arguments within the BEFORE hook will be empty. However, they will be 
  accessible into the "AFTER" hook.
* the BEFORE hook is always executed, the AFTER hook just for successful 
  connections.
* in a BEFORE hook you can't access the database since you're not connected yet. 
  However, this is allowed in an AFTER hook.

For example:

  function! VORAXAfterConnect(user, db, role)
    let data = vorax#sqlplus#Query(
      \ "select sys_context('userenv', 'instance_name') from dual;")
    call vorax#output#Spit("Hey! You're on " . data.resultset[0][0][0])
  endfunction

Another interesting thing you'll notice is that Vorax status-line will display 
the USER@DB info in a different color, taking into consideration the type of 
connection: regular or as SYSDBA. Usually, the SYSDBA connections are shown in 
red. Of course, this may be changed if one choose to implement it's own Vorax 
status-line, via g:vorax_output_window_statusline.

==============================================================================
EXECUTING STATEMENTS                                              *vorax-exec* 

The most common way to execute a statement is from an SQL buffer. The default
key for running statements in Vorax is:

  <Leader>e

Supposing you have the following commands loaded into an SQL buffer:

  set serveroutput on
  begin
    dbms_output.put_line('Test');
  end;
  /
  select 'Abc' from dual;

You have the following options to run each of the above statements:

  * move the cursor on the statement you want to execute and press 
    "<Leader>e". Vorax will try to automatically figure out what is the 
    statement under cursor, regardless it's an SQL command, a PLSQL statement 
    or a SQLPLUS command.

  * visual select the statement(s) to be executed and run the selection with
    the same "<Leader>e" mapping.

  * if you want to execute the entire SQL buffer you may also use the 
    VORAXExecBuffer command or the <Leader>be or @ key mapping. be stands for 
    Buffer Exec.

Note: The default mapping, of course, is configurable.

In addition, you may use:

  :VORAXExec <command>

This last method may prove to be convenient when you don't want to open a SQL 
buffer.

If the running command is taking too long to complete you may cancel it using
the default <Esc> mapping. How the statement is cancelled is depending on the 
OS under which Vorax is running:
  
  * on UNIX flavors, an INT signal is sent to the "slave" SQLPLUS process.
    This is like a <C-c> in the terminal window. From this point is up to 
    the SQLPLUS process to tell the server to cancel the query. Vorax will 
    simply wait for a confirmation that the statement was successfully cancelled. 
    During this time, Vorax will display:
    
    Cancelling... Press "K" to abort the session
    
    Some statements needs a lot of time to be cancelled, especially because of 
    the involved UNDO data which has to be applied during the rollback phase. 
    Others, even they don't change data, involves other obscure complex 
    cancellation tasks which take time. So, if you want to simply abort the 
    session, you may press "K" and the SQLPLUS process will be killed. The
    session on the server might still be running until, eventually, the server
    will figure out that there's no client on the other end of the "wire".

  * on WINDOWS a running statement cannot be cancelled without killing the
    SQLPLUS process. This is a bug/limitation of the SQLPLUS on Windows. As
    soon as the Oracle will implement the following improvement request,
    Vorax will be able to handle more nicely the cancel operation on this
    platform:

      Bug 8890996: ENH: CONTROL-C SHOULD NOT EXIT WINDOWS CONSOLE SQLPLUS

    So, on Windows, when the user asks for a cancellation of a running
    statement, by default, Vorax will display a warning message and it
    will ask the user to confirm that he really want to abort his session.
    If the g:vorax_auto_connect variable is 1, then Vorax will automatically
    reconnect using the last credentials used in the VORAXConnect command.

Another way of executing statements in Vorax is using the "sandbox" mode. 
This usually applies to external SQL scripts. Have you ever executed such a 
script which messed up your Sqlplus environment because it had all sort of 
weird options set which weren't reset to their original values at the end of 
the script? Well, that's something I really don't like, so Vorax provides 
the "sandbox" mode in which, just before starting the script to be run, all 
current Sqlplus options are saved and, as soon as the script finishes, they 
are restored as they were before. You may run a command/script in "sandbox" 
mode using the default key mapping <Leader>E.

Talking about scripts, did you know Vorax integrates nice with NERDTree? You 
can navigate to the SQL script you want to execute and press @, directly in 
the file explorer provided by NERDTree. This functionality applies to any SQL 
script or any file with an extension specified in g:vorax_plsql_associations 
variable. All scripts run via NERDTree are executed using the "sandbox" mode.

==============================================================================
THE OUTPUT WINDOW                                               *vorax-output* 

Vorax has a built-in output window. This is a special VIM buffer where the
result of executing various statements is redirected to. Some of the relevant
settings for this window are:

  * g:vorax_output_window_position: where to anchor the output window: bottom
    or top. By default is "bottom".

  * g:vorax_output_window_size: the size of the window. By default is 20 rows.

  * g:vorax_output_window_append: whenever or not the output generated by
    various commands to be appended at the end of the output window, without
    removing the old content. By default is "0", which means that only the
    content belonging to the last executed statement is displayed.

  * g:vorax_output_window_sticky_cursor: whenever or not to keep the cursor
    in the output window after a statement is executed. By default is "0",
    which means the cursor will be placed into the originating buffer from
    where the statement was executed.

  * g:vorax_output_window_hl_error: the highlight group to be used for
    highlighting errors within the output window (usually, everything like
    ORA-*, SP-*)

  * g:vorax_output_abort_key: the key mapping for cancelling a running
    statement. By default is <Esc>.

  * g:vorax_output_window_default_funnel: this defines the default layout
    for the spit output (details below, keep reading).

  * g:vorax_output_full_heading: whenever or not to display the full column 
    name in the output query heading.

  * vorax_output_show_open_txn: whenever or not to display a marker into
    the status line if Vorax is in an open transaction. The marker
    can be further customized using the g:vorax_output_txn_marker to specify
    the text to be displayed and User4 highlight to define the color of this
    marker.

The output window display may be toggled using:

  :VORAXOutputToggle

or the default mapping <Leader>o.

You can also toggle the append mode for the output window using:

  :VORAXOutputToggleAppend

or using the default local mapping <Leader>a.

One of the most annoying things in SqlPlus is the column heading truncation, 
when the maximum column size is lesser than the length of the column name. 
Usually, you have to come up with a bunch of COLUMN FORMAT commands, but this 
is boring and, in case of many columns, it's not funny at all. To toggle the 
full column name display you may use:

  :VORAXOutputToggleFullHeading

or you may use the default local mapping <Leader>h. This works just for those 
queries interactively executed from an SQL buffer. It doesn't work for 
statements which are run from SQL scripts. For example: select * from dual 
executed directly from a SQL buffer (e.g SQL scratch) will display the full 
"DUMMY" column heading. However, if the statement is in the test.sql file and 
this file is executed, the full heading feature won't work. That's because 
Vorax doesn't parse the external SQL file.

The output spit by various commands may be funneled through some predefined
formatters which are very handy quite often. These formatters are:

  * VERTICAL: displays every column from the output of a query, line by
    line. The default mapping to switch to this mode is <Leader>v.
  * PAGEZIP: compress every page spit by the execution of a query. By
    compressing, we mean that the column width is adjusted so that to fit
    to the width of the largest value of that column, within the defined
    SQLPLUS pagesize. The default key mapping to switch to this mode is
    <Leader>p.
  * TABLEZIP: like the PAGEZIP, but it does compression for the entire
    table. The default key mapping to switch to this mode is <Leader>t.

There are other interesting things you can do in the output window:

  * switch to append mode using the <Leader>a key mapping. In this mode the 
    window is not cleared before executing a new command.
  * activate the "STICKY" mode using <Leader>s. By default, as soon as a 
    command finish executing, the cursor is moved to the originating buffer. 
    However, with "STICKY" mode on, the cursor will remain within the output 
    window.
  * limiting rows with <Leader>lr. If you don't want to fetch all records 
    from a query then you may use this feature which allows to specify how 
    many records to get. This is done by embedding your query in a 
    SELECT (<original query>) WHERE ROWNUM <= :limit wrapper. This feature 
    does work just for queries executed directly from an SQL buffer, not 
    via external scripts.
  * set the "TOP" mode using <Leader>T. In this mode, after a statement is 
    executed, the first line of the corresponding output will be displayed 
    on the top of the output window. You may use this mode if you find it 
    more natural to scroll from the beginning of the output to the end than 
    the other way around.

Please note that the above key mappings are local to the output window.

==============================================================================
EDIT DATABASE OBJECTS                                             *vorax-edit* 

In Vorax, a quite often task is to open the definition behind a database 
object. Maybe you want to look at how the object was created or maybe the goal 
is to change its definition. Whatever the reason is, Vorax provides a very 
simple command for this task:

  :VORAXEdit <object_type> [<owner>.]<object_name>

The <object_type> may be a PACKAGE, a TABLE, a TYPE_SPEC etc. Usually, the 
<object_type> is a sub-set of the valid types known to work with the Oracle 
package DBMS_METADATA. The <object_name> is the Oracle object you want to open 
and, very important, its type must match the provided <object_type>. Both, 
<object_type> and <object_name> have completion support.

The type of Vim buffer into which the definition is loaded is different according 
to the type of the opened object. Here, two Vorax settings are important: 
g:vorax_plsql_associations and g:vorax_sql_associations. These are Vim 
dictionaries, having as key the <object_type> and, as value, the file extension. 
Everything in g:vorax_plsql_associations refers to PLSQL buffers, everything in 
g:vorax_sql_associations refers to SQL buffers. If an object type is not found in 
these two global variables then the value form g:vorax_sql_script_default_extension 
is used. So, these settings can be used to tailor the buffer/file names so that 
to use your own file extensions. Many companies also enforce some naming conventions 
for these files therefore you'll need to change these settings accordingly.

The most important thing you need to take care when using this command is that, when 
a file with the same name which Vorax would use to open a database object definition 
DOES exist in the current directory, then the local file is loaded instead of the 
actual database definition. This is not a bug, but a feature. Usually, if you use 
a source repository system then you should always rely on the file from the 
repository and not on the definition from the database. Of course, there are times 
when you want to get the definition from the database, in which case you have to use 
the VORAXEdit! command. Did you notice the trailing "!"? If you use the "bang!" 
version of VORAXEdit, then the definition form the database will always overwrite any 
local file which might exist in the current folder. In both situations, with "!" and 
without, VORAXEdit will display a warning when a local file with the same name exists.

If you want to get rid of the warning messages you may simply disable them 
using g:vorax_edit_warning.

In case you want to create a new database object, you may use 

  :VORAXNew <type> <name> 

command. The <type> is the database object type and the <name> is the name of the object. 
The name is optional and if it's not provided you'll be asked to. This command will 
open a new Vim buffer having the name of the database object to be created and the 
file extension corresponding to g:vorax_plsql_associations or g:vorax_sql_associations. 
As soon as this buffer is opened, a user defined function can be invoked, of course, 
if there's any defined. The signature of this function must be:

  function VORAXAfterNewDbObject(type, object)

  endfunction

You may use this hook in your .vimrc file to expand your custom templates or do anything 
you consider useful for this particular scenario.

==============================================================================
THE DATABASE EXPLORER                                         *vorax-explorer* 

Every decent Oracle IDE has a database explorer which may be used to navigate 
through the database objects in an hierarchical way. Vorax provides such a 
feature as well.

The following key mappings are relevant in the context of the database 
explorer:

  * <Leader>ve - Toggle the explorer window. ve stands for "Vorax Explorer".
  * m - Invokes the contextual menu for an explorer node.
  * o or ENTER - Edit the object definition or expand/collapse a category
  * R - Refresh the database explorer.
  * <Leader>d - describe the selected database object
  * <Leader>D - verbose describe the selected table

The database explorer may be configured using the following global variables:

  * g:vorax_dbexplorer_force_edit: whenever or not to get the object 
    definition directly from the database or, if a local file matching the 
    object name exists, to open that file instead (default value). Please 
    see VORAXEdit vs. VORAXEdit!.
  
  * g:vorax_dbexplorer_exclude: a Vim style regular expression which may be 
    used to filter the categories some might not be interested in.

  * g:vorax_db_explorer_side: where to layout the database explorer window: 
    left or right. By default it's left.
  
  * g:vorax_db_explorer_size: the size of the explorer window. The default 
    value is 30.

The contextual menu of the database explorer can be extended using custom 
plugins. In fact, every option you see in the menu is provided by a plugin. 
Of course, you're free to write your own super-mega-cool plugins.

A plugin is just a vim script which must reside in vorax/plugin/explorer 
folder. It has a very simple interface:

  let s:plugin = {
    \ 'text': 'my test plugin',
    \ 'shortcut' : 't'}

  function! s:plugin.Callback(descriptor)
    " do stuff here
  endfunction

  function! s:plugin.IsEnabled(descriptor)
    " decide if the plugin should be activated for the current item
  endfunction

  call vorax#explorer#RegisterPluginItem(s:plugin)

Let's have a look at the code above. In text we put the label we want to 
appear in the contextual menu. The shortcut is, obvious, the shortcut which 
may be used to invoke the menu item implemented by the plugin.

There are two functions: Callback and IsEnabled. Both are invoked with a 
handler, describing the selected node from the explorer tree. We'll come 
back to this descriptor shortly. The IsEnabled function is where you decide 
if your plugin is valid for the selected node. For example, a plugin for 
collecting table statistics wouldn't make sense for a package. The Callback 
function is where you put your plugin logic. It is the code which is run 
when the user invokes the menu item provided by your plugin.

The descriptor argument is a hash which describes the selected node from the 
database explorer. It has the following keys:

  object: is the object name, as it is shown in the explorer. If the current 
          item is not a database object, the value of this key is ''.
  owner: is the owner of the object. It's empty if the selected item is not 
         a database object.
  category: the category to which the node belongs to. Could be: "Tables", 
            "Packages" etc.
  dbtype: is the Oracle type of the selected node
  status: the status of the object: VALID or INVALID

The above information should be enough to determine the context in which your 
plugins operates.

The final step is to register the plugin using the RegisterPluginItem function.

You may have a look into your vorax/plugin/explorer folder to see other 
examples of already implemented plugins. Please note that every plugin script 
file starts with a number. This is a convenient way of ordering the menu items 
when the contextual menu is displayed.

==============================================================================
CONNECTION PROFILES                                           *vorax-cmanager* 

If you are that kind of DBA who administers a lot of databases then... 
welcome to the club. Getting the connection string from an Excel sheet or a 
Word document is not funny, really! Keepass may be a convenient alternative, 
but when all you have is a dummy console, even such tools might be difficult 
to be accessed.

So, Vorax comes with a simple connection profiles window where you can 
register and group various connection strings. The connection profiles store 
is protected by a master password, provided at the time the repository is 
created.

From the technical point of view, the implementation is simple: a public 
and a private key are generated, the private key is then secured with your 
master password and then, the passwords from the connection profiles stored 
into the repository are encrypted with this key. That's it!

Every connection profile may be assigned to a category so that to be easy 
to distinguish between related profiles (e.g. Production, Test, Development).

The key map for toggling the connection profiles window is <Leader>pr. "PR" 
stands for 'profile'.

You may navigate through the hierarchical structure of the connection profiles 
using the following key maps:

  j: move down
  k: move up
  Enter or o: expand category or connect using the profile under cursor
  m: invoke the contextual menu for the node under cursor to add new profiles, 
     edit the existing ones or simply to remove them. Other options may be 
     available since the contextual menu supports custom plugins, as it is 
     described later within this chapter.

The look of the connection profiles window is controlled by the following 
Vorax global variables:

  g:vorax_cmanager_side: where to display the connection profile window, 
                         right or left
  g:vorax_cmanager_size: the width of the connection profile window

The contextual menu can also be extended using custom plugins. A plugin is 
just a vim script which must reside in vorax/plugin/cmanager folder. It has 
a very simple interface:

  let s:plugin = {
    \ 'text': 'my test plugin',
    \ 'shortcut' : 't'}

  function! s:plugin.Callback(descriptor)
    " do stuff here
  endfunction

  function! s:plugin.IsEnabled(descriptor)
    " decide if the plugin should be activated for the current item
  endfunction

  call vorax#cmanager#RegisterPluginItem(s:plugin)

It's the same interface used to extend the Database Explorer. What is 
different is the descriptor dictionary used to invoke the plugin. In case 
of a CManager plugin, the descriptor has the following attributes:

  root: 1 if the plugin is invoked for the root node of the connections 
        tree, 0 otherwise
  category: the category of the connection profile
  profile: the profile, as it is shown in the connections tree

You may have a look into your vorax/plugin/cmanager folder to see some 
examples of the already implemented plugins.

==============================================================================
DESCRIBING OBJECTS                                            *vorax-describe* 

In order to describe a database object, Vorax provides the following methods:

  * the BASIC describe (the output from the SqlPlus DESC command): applies 
    to tables, views, procedures, functions, packages and types.
  
  * a VERBOSE describe: applies just to tables and it gets a lot of information 
    about: comments, constraints, indexes, parent-child relationships, the 
    tablespace the table belongs to, etc.

The default key mappings are:

  * <Leader>d for a BASIC describe
  * <Leader>D for a VERBOSE describe

"D" stands for "Describe" therefore it shouldn't be a problem to memorize it. 
By default, these mappings are available in all SQL and PLSQL buffers, as 
well as into the Vorax output window. They describe the identifier under 
the cursor.

The describe feature is also available via the :VORAXDesc command which 
expects as argument the object name to be described. The bang version, 
:VORAXDesc!, may be used to get the verbose description of a table. Both 
:versions supports completion for the object name.

==============================================================================
WORKING WITH EXPLAIN PLANS                                 *vorax-explainplan* 

It's hard to imagine any tuning tasks without having the possibility to peek 
at the explain plan of a long running query. Usually it is the first thing 
we are looking at in order to grasp an idea of how the statement is actually 
executed.

When it comes to explaining a SQL statement, there are two main approaches:

  * get a detailed plan which involves executing the statement. This would be 
    the real execution plan which is usually obtained using DBMS_XPLAN 
    package.

  * get an estimated plan which may or may not be the real execution plan, 
    with information about how the optimizer is intending to execute the 
    statement, but without actually running it. It's the typical case of 
    "AUTOTRACE TRACEONLY EXPLAIN" SqlPlus command.

Taking into consideration the above use cases, Vorax implements the two 
approaches. Basically you can get:

  * the real execution plan. The default keymap is <Leader>x
  * the estimated execution plan. The default keymap is <Leader>X

"X" stands for "eXplain".

You may further adjust the real execution plan obtained via DBMS_XPLAN by 
providing your own format, specified into the g:vorax_xplan_format variable. 
Its value should match a valid value of the "format" argument of the 
DBMS_XPLAN.DISPLAY_CURSOR function. The default value is ALLSTATS LAST.

==============================================================================
PLSQL SUPPORT                                                    *vorax-plsql* 

As an Oracle developer, is very likely to interact with a lot of PLSQL objects 
like: packages, types, functions, procedures etc. The code source of these 
database objects are usually loaded into special vorax PLSQL buffers which, 
unlike the SQL ones, allow to compile the corresponding PLSQL source.

The default key mapping for compiling is <Leader>c. "C" stands, obviously, for 
"C"ompile. Two things happen when a PLSQL object is compiled:

  * the buffer content is sent as it is to the server.
  * as soon as the buffer content is executed, Vorax will check the ALL_ERRORS 
    view to see if any relevant errors exist. If such errors are found, they are 
    loaded into a Vim quickfix window, along with the error line, error column 
    and the message itself.

Note: Pay attention that during the compilation of an PLSQL object, the 
      substitution variables feature is disabled.

The window where the compilation errors are displayed is configurable via:

  * g:vorax_errwin_height: the height of the error window
  * g:vorax_errwin_goto_first: whenever or not, after the error window is 
    displayed, the cursor to be moved to the first error.

==============================================================================
THE ORACLE HTML DOCUMENTATION                                   *vorax-oradoc* 

Does it happen to find yourself looking at a column from a dictionary table, 
or maybe at a system package name, etc. and not to know what does it mean? 
If the answer is YES then keep reading.

One of the best things of Oracle is its extensive documentation. When you're 
in doubt about something related to your Oracle code, the next natural move 
is to go straight to the Oracle official documentation. Every good DBA or 
database developer knows exactly where to look into. There are a few "books" 
which are the most frequently used like "The Oracle Database Reference", 
"The SQL Reference", "The Database PL/SQL Packages and Types Reference", etc. 
Without knowing exactly where to search into, it's quite easy to get lost 
in all that documentation. Of course, Oracle provides an online search feature, 
which gives you the exact spots where the term you're interested in is located. 
However, it doesn't work without an internet connection and it may be slow 
at times. Without an offline search capability the whole Oracle Documentation 
package stored on your disk doesn't help so much, really!

In order to bring more speed and efficiency, Vorax provides an easy way to 
look-up for something within your offline HTML documentation.

First of all, you need to download the documentation package from the Oracle 
web page. Currently these documentation packs can be downloaded from:

http://www.oracle.com/technetwork/database/enterprise-edition/documentation/index.html

Nevertheless, pay attention that Oracle is not very consistent with these 
links and it may happen to change them without any notice. However, usually 
it is a big archive with all the documentation for a particular version. 
You may also need to have a valid OTN account in order to have permission 
to download it.

As soon as you have the archive, unzip it somewhere on your disk. Then all 
these HTML files must be indexed using the following command:

  :VORAXDocIndex [path_to_your_oracle_html_doc]

Usually, the documentation pack is huge and I doubt is anybody interested 
in all that content. That's why, Vorax will index just the books provided 
in the g:vorax_oradoc_index_only variable. By default, this variable is 
initialized as an array having the following elements:

  - "Database SQL Language Reference"
  - "Database Reference"
  - "Database PL/SQL Packages and Types Reference"
  - "Database Error Messages"

All above are in fact prefixes used by Vorax indexer to match the book 
name. So, in short, only those books with names starting with one of the 
elements in the g:vorax_oradoc_index_only array are indexed.

If you want to add more titles, you need to know what other books are 
available in your documentation pack. You may use the following command 
to find this:

  :VORAXDocBooks [path_to_your_oracle_html_doc]

If you need to index all the content, then it's enough to unlet the 
g:vorax_oradoc_index_only variable.

As soon as the documentation is indexed we can start searching directly 
from Vorax. You can manually provide a term using the :VORAXDocSearch 
command. If you do not provide any argument to this command, Vorax will 
ask you what do you want to search for, otherwise the provided parameter 
will be used as a search term. Another way of searching is using the word 
under cursor, when the K key is pressed. The K mapping is available only 
in Vorax sql/plsql buffers, or into the output window.

The result of your search is displayed in a special window along with the 
containing book. Within this window you can:

  - navigate to the item you think is the most relevant
  - opening the documentation for a found item using Enter or o.
  - closing the window using q.

The maximum number of search results is configurable via the 
g:vorax_oradoc_max_results variable. By default it's 30.

You may control the layout of the Oracle documentation window with the 
following variables:

  - g:vorax_oradoc_win_style: can be horizontal or vertical
  - g:vorax_oradoc_win_side: if the window style was defined as "horizontal" 
    then the valid values are top or bottom. If the window style is "vertical", 
    then you may choose between right or left
  - g:vorax_oradoc_win_size: the size of the documentation window

By default, Vorax doesn't know how to open the target documentation file 
because this is done differently based on the OS platform and user preferences: 
some prefer Firefox, others Chrome and some freaks, IE. So, Vorax will let the 
user to tell how the documentation file is supposed to be opened, by defining 
the g:vorax_oradoc_open_cmd. The %u substitution variable is used to merge the 
documentation file path into the defined command. For example:

  let g:vorax_oradoc_open_cmd='"C:\Program Files (x86)\Chrome\chrome.exe" file://%u'

will open the documentation file using Chrome.

Or, if you are in tmux (my favorite):

  let g:vorax_oradoc_open_cmd='tmux new-window "w3m %u"'

This means, a new tmux window will be created with a w3m browser having the 
documentation file loaded. That's very convenient because you don't have to leave 
the terminal window.

"vim:ts=8 sw=8 noexpandtab tw=78 ft=help:
